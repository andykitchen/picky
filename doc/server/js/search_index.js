var search_data = {"index":{"searchIndex":["analyzer","array","class","hash","kernel","module","object","performant","array","picky","api","category","partial","similarity","weight","search","boost","source","tokenizer","charactersubstituter","analytics","backends","backend","file","basic","json","helpers","file","internal","memory","basic","json","marshal","prepared","text","redis","basic","directlymanipulable","float","list","string","sqlite","array","basic","directlymanipulable","integerkeyarray","stringkeyarray","value","bundle","calculations","location","capistrano","all","caching","deploy","overrides","standard","statistics","categories","category","location","picky","category","picky","idnotgivenexception","charactersubstituters","westeuropean","console","generators","partial","infix","none","postfix","strategy","substring","substringgenerator","similarity","doublemetaphone","metaphone","none","phonetic","soundex","strategy","strategy","weights","constant","dynamic","logarithmic","strategy","stub","helpers","indexing","measuring","index","indexers","base","parallel","serial","indexes","memory","redis","interfaces","liveparameters","masterchild","couldnotupdateconfigurationerror","unicorn","loader","loggers","concise","silent","verbose","performant","pool","query","allocation","allocations","boosts","combination","combinations","differentbackendserror","indexes","indexescheck","qualifiercategorymapper","token","tokens","results","exactfirst","scheduler","search","sinatra","indexactions","statistics","tokenizer","try","wrappers","bundle","calculation","delegator","exactpartial","indexeddelegator","indexingdelegator","location","wrapper","rack","harakiri","string","symbol","+()","<<()","<<()","<<()","<<()","<<()","<=>()","==()","==()","==()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]()","[]=()","[]=()","[]=()","[]=()","[]=()","add()","add()","add()","add()","add()","add_margin()","add_partialized()","add_partialized()","add_similarity()","add_text()","add_tokenized_token()","after_indexing()","allocation_for()","allocations_ary_for()","allocations_for()","analyze()","analyze()","anchor=()","application()","asynchronous()","at_least_version()","backend()","backend()","boost()","boost_for()","boost_for()","boost_for_categories()","build_realtime()","build_realtime_mapping()","bundle()","bundle_for()","cache()","calculate()","calculate()","calculate()","calculate_ids()","calculate_score()","calculate_score()","calculate_total()","calculated_range()","call()","cap()","cap?()","cardinality()","case_sensitive()","categorize()","categorize()","categorize_with()","category()","category_name()","check()","check_argument_in()","check_backends()","check_gem()","check_hiredis_gem()","check_redis_gem()","check_source_empty()","clear()","clear()","clear()","clear()","clear()","clear()","clear()","clear()","clear()","clear()","clear_categories()","clear_configuration()","clear_indexes()","clear_inverted()","clear_realtime()","clear_realtime()","clear_similarity()","clear_weights()","close_child()","clustered_uniq()","clustered_uniq_fast()","combination_for()","configuration_to_s()","configure()","create_backends()","create_configuration()","create_configuration()","create_configuration()","create_configuration()","create_directory()","create_inverted()","create_inverted()","create_inverted()","create_inverted()","create_realtime()","create_realtime()","create_realtime()","create_realtime()","create_similarity()","create_similarity()","create_similarity()","create_similarity()","create_table()","create_table()","create_table()","create_table()","create_weights()","create_weights()","create_weights()","create_weights()","default_indexing_with()","default_searching_with()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","double_metaphone()","double_metaphone()","downcase?()","drop_table()","dump()","dump()","dump()","dump()","dump()","dump()","dump()","dump()","dump()","dump()","dump()","dump()","dump()","dump()","dump_json()","dump_marshal()","dump_sqlite()","duration()","each_bundle()","each_category()","each_category()","each_delegate()","each_intoken()","each_intoken()","each_partial()","each_partial()","each_partial()","each_subtoken()","each_subtoken()","each_subtoken()","empty()","empty()","empty()","empty()","empty()","empty()","empty()","empty_tokens()","encode()","encode()","encode()","encode()","exclaim()","execute()","execute_rake_task()","expand_combinations_from()","extend_each_of()","extended()","extended()","extended()","extended()","extended()","extended()","extended()","extended()","extended()","extended()","extension()","extension()","extension()","extension()","extension()","extension()","extract_boosts()","extract_character_substituter()","extract_configuration()","extract_host()","extract_partial()","extract_predefined()","extract_qualifiers_from()","extract_similarity()","extract_source()","extract_tokenizer()","extract_weight()","facets()","facets()","finish()","flush()","flush()","flush()","fork?()","from()","from()","from()","generate_intermediate_result_id()","geo_categories()","harakiri()","harakiri()","harakiri?()","host()","identifier()","identifier()","identifier()","identifier()","identifier()","identifier()","ids()","ids()","ids()","ids()","ids()","ids()","ids()","ids()","ids()","ids()","ids()","ids()","ignore()","ignore_unassigned_tokens()","indented_to_s()","index()","index()","index()","index()","index()","index()","index_analysis()","index_directory()","index_flush()","index_flush()","index_name()","index_path()","index_to_s()","indexer()","indexing()","indexing()","indexing()","info()","info()","info()","initial()","initial()","initial()","initial()","initial()","initialize_backends()","inject_possible_for()","install()","install_on()","instance()","instance_delegate()","key_format()","key_format()","key_format()","kill_each_worker_except()","kill_worker()","lazily_initialize_client()","lines_of_code()","load()","load()","load()","load()","load()","load()","load()","load()","load()","load()","load()","load()","load()","load()","load_application()","load_configuration()","load_framework()","load_framework_internals()","load_inverted()","load_realtime()","load_relative()","load_self()","load_similarity()","load_user()","load_user_interface()","load_weights()","log_type()","make()","make()","map()","mapping()","max_allocations()","max_words()","maybe_load_hiredis()","memory_efficient_intersect()","metaphone()","metaphone()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","no_partial_character=()","no_similar_character=()","normalize_with_patterns()","normalize_with_patterns?()","normalizes_words()","notify_finished()","only()","open()","originals()","output()","parameters()","partial=()","partial?()","partial_character=()","partialize()","partialize_last()","partialized()","pid()","possible_categories()","possible_combinations()","possible_combinations_in()","possible_combinations_in()","possible_for()","preamble()","prepare()","prepare()","prepare()","prepare!()","prepare_in_parallel()","prepared_allocations_for()","prepared_index_file()","prepared_index_path()","preprocess()","pretokenize()","prioritize()","process()","process()","process()","process!()","process!()","process_unique!()","process_with_illegals!()","processed()","processed()","progress()","qualifier_text_delimiter=()","qualifiers()","qualifiers()","qualifiers_delimiter=()","qualify()","querying_removes_characters()","querying_removes_characters=()","querying_splits_text_on()","querying_splits_text_on=()","querying_stopwords()","querying_stopwords=()","raise_different()","raise_not_found()","raise_not_found()","range()","ranged_category()","redefine_illegals()","redis_version()","redis_with_scripting?()","reduce_to()","register()","register()","reindex()","reject()","rejects_token_if()","release_all()","reload()","remove()","remove()","remove()","remove()","remove()","remove_illegals()","remove_illegals()","remove_non_single_stopwords()","remove_stopwords()","remove_worker()","removes_characters()","replace()","replace_from()","require_relative()","reset()","reset()","reset()","reset()","reset_backend()","reset_backend()","restrict()","restrict_to()","result_identifier()","retrieve()","retrieve()","retrieve()","retrieve()","retrieve()","retrieve()","saved()","saved?()","saved?()","saved?()","saved?()","schedule()","scheduler()","score()","search()","search_with()","searched()","searching()","searching()","searching()","similar()","similar?()","similar_character=()","similar_possible_for()","similar_tokens_for()","similar_tokens_for()","similarity_to_s()","similarize()","size()","size()","size()","size()","sort!()","sort_by_levenshtein!()","sorted_allocations()","soundex()","soundex()","source()","source()","split()","splits_text_on()","start()","start_master_process_thread()","stopwords()","substitute()","substitute_characters()","substitutes_characters_with()","symbolize()","symbolize!()","synchronous()","terminate_early()","timed()","timed_exclaim()","timed_exclaim()","timed_indexing()","to()","to_a()","to_hash()","to_json()","to_json()","to_json()","to_result()","to_result()","to_result()","to_result()","to_result()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_stats()","to_stdout()","tokenize()","tokenize()","tokenize()","tokenize()","tokenized()","tokenizer()","tokenizer()","tokenizer()","tokenizer()","tokens()","tokens_for()","total()","total()","transaction()","truncate_db()","try_updating_configuration_with()","unblock_source()","uniq!()","unshift()","unshift()","unshift()","unshift()","use_exact_for_partial?()","use_exact_for_partial?()","warn_gem_missing()","weight()","weight()","weight()","weight()","weight()","weight()","weight()","weight_for()","weight_for()","weight_for()","weights()","weights_analysis()","weights_to_s()","with_data_snapshot()","with_data_snapshot()","worker_pids()","write_parent()"],"longSearchIndex":["analyzer","array","class","hash","kernel","module","object","performant","performant::array","picky","picky::api","picky::api::category","picky::api::category::partial","picky::api::category::similarity","picky::api::category::weight","picky::api::search","picky::api::search::boost","picky::api::source","picky::api::tokenizer","picky::api::tokenizer::charactersubstituter","picky::analytics","picky::backends","picky::backends::backend","picky::backends::file","picky::backends::file::basic","picky::backends::file::json","picky::backends::helpers","picky::backends::helpers::file","picky::backends::internal","picky::backends::memory","picky::backends::memory::basic","picky::backends::memory::json","picky::backends::memory::marshal","picky::backends::prepared","picky::backends::prepared::text","picky::backends::redis","picky::backends::redis::basic","picky::backends::redis::directlymanipulable","picky::backends::redis::float","picky::backends::redis::list","picky::backends::redis::string","picky::backends::sqlite","picky::backends::sqlite::array","picky::backends::sqlite::basic","picky::backends::sqlite::directlymanipulable","picky::backends::sqlite::integerkeyarray","picky::backends::sqlite::stringkeyarray","picky::backends::sqlite::value","picky::bundle","picky::calculations","picky::calculations::location","picky::capistrano","picky::capistrano::all","picky::capistrano::caching","picky::capistrano::deploy","picky::capistrano::overrides","picky::capistrano::standard","picky::capistrano::statistics","picky::categories","picky::category","picky::category::location","picky::category::picky","picky::category::picky::category","picky::category::picky::category::picky","picky::category::picky::category::picky::idnotgivenexception","picky::charactersubstituters","picky::charactersubstituters::westeuropean","picky::console","picky::generators","picky::generators::partial","picky::generators::partial::infix","picky::generators::partial::none","picky::generators::partial::postfix","picky::generators::partial::strategy","picky::generators::partial::substring","picky::generators::partial::substringgenerator","picky::generators::similarity","picky::generators::similarity::doublemetaphone","picky::generators::similarity::metaphone","picky::generators::similarity::none","picky::generators::similarity::phonetic","picky::generators::similarity::soundex","picky::generators::similarity::strategy","picky::generators::strategy","picky::generators::weights","picky::generators::weights::constant","picky::generators::weights::dynamic","picky::generators::weights::logarithmic","picky::generators::weights::strategy","picky::generators::weights::stub","picky::helpers","picky::helpers::indexing","picky::helpers::measuring","picky::index","picky::indexers","picky::indexers::base","picky::indexers::parallel","picky::indexers::serial","picky::indexes","picky::indexes::memory","picky::indexes::redis","picky::interfaces","picky::interfaces::liveparameters","picky::interfaces::liveparameters::masterchild","picky::interfaces::liveparameters::masterchild::couldnotupdateconfigurationerror","picky::interfaces::liveparameters::unicorn","picky::loader","picky::loggers","picky::loggers::concise","picky::loggers::silent","picky::loggers::verbose","picky::performant","picky::pool","picky::query","picky::query::allocation","picky::query::allocations","picky::query::boosts","picky::query::combination","picky::query::combinations","picky::query::differentbackendserror","picky::query::indexes","picky::query::indexescheck","picky::query::qualifiercategorymapper","picky::query::token","picky::query::tokens","picky::results","picky::results::exactfirst","picky::scheduler","picky::search","picky::sinatra","picky::sinatra::indexactions","picky::statistics","picky::tokenizer","picky::try","picky::wrappers","picky::wrappers::bundle","picky::wrappers::bundle::calculation","picky::wrappers::bundle::delegator","picky::wrappers::bundle::exactpartial","picky::wrappers::bundle::indexeddelegator","picky::wrappers::bundle::indexingdelegator","picky::wrappers::bundle::location","picky::wrappers::bundle::wrapper","rack","rack::harakiri","string","symbol","picky::query::tokens#+()","picky::backends::redis::directlymanipulable#<<()","picky::backends::sqlite::directlymanipulable#<<()","picky::categories#<<()","picky::category#<<()","picky::index#<<()","picky::query::allocation#<=>()","picky::query::boosts#==()","picky::query::token#==()","picky::query::tokens#==()","picky::backends::file::json#[]()","picky::backends::redis::float#[]()","picky::backends::redis::list#[]()","picky::backends::redis::string#[]()","picky::backends::sqlite::array#[]()","picky::backends::sqlite::value#[]()","picky::bundle#[]()","picky::categories#[]()","picky::generators::weights::constant#[]()","picky::generators::weights::dynamic#[]()","picky::indexes#[]()","picky::backends::redis::list#[]=()","picky::backends::redis::string#[]=()","picky::backends::sqlite::array#[]=()","picky::backends::sqlite::value#[]=()","picky::generators::weights::stub#[]=()","picky::bundle#add()","picky::category#add()","picky::pool::add()","picky::query::qualifiercategorymapper#add()","picky::wrappers::bundle::location#add()","picky::calculations::location#add_margin()","picky::bundle#add_partialized()","picky::wrappers::bundle::location#add_partialized()","picky::bundle#add_similarity()","picky::category#add_text()","picky::category#add_tokenized_token()","picky::index#after_indexing()","picky::query::indexes#allocation_for()","picky::query::indexes#allocations_ary_for()","picky::query::indexes#allocations_for()","analyzer#analyze()","picky::statistics#analyze()","picky::calculations::location#anchor=()","picky::statistics#application()","picky::backends::sqlite::basic#asynchronous()","picky::backends::redis#at_least_version()","picky::bundle#backend()","picky::index#backend()","picky::search#boost()","picky::query::boosts#boost_for()","picky::query::combinations#boost_for()","picky::query::boosts#boost_for_categories()","picky::bundle#build_realtime()","picky::category#build_realtime_mapping()","picky::query::combination#bundle()","picky::category#bundle_for()","picky::category#cache()","picky::calculations::location#calculate()","picky::wrappers::bundle::calculation#calculate()","picky::wrappers::bundle::location#calculate()","picky::query::allocation#calculate_ids()","picky::query::allocation#calculate_score()","picky::query::allocations#calculate_score()","picky::query::allocations#calculate_total()","picky::calculations::location#calculated_range()","rack::harakiri#call()","picky::tokenizer#cap()","picky::tokenizer#cap?()","analyzer#cardinality()","picky::tokenizer#case_sensitive()","picky::query::token#categorize()","picky::query::tokens#categorize()","picky::query::token#categorize_with()","picky::index#category()","picky::query::combination#category_name()","picky::indexers::base#check()","picky::tokenizer#check_argument_in()","picky::query::indexescheck::check_backends()","picky::generators::similarity::phonetic#check_gem()","picky::backends::redis#check_hiredis_gem()","picky::backends::redis#check_redis_gem()","picky::index#check_source_empty()","picky::backends::file::json#clear()","picky::backends::internal#clear()","picky::backends::redis::list#clear()","picky::backends::redis::string#clear()","picky::backends::sqlite::basic#clear()","picky::bundle#clear()","picky::category#clear()","picky::generators::weights::stub#clear()","picky::pool::clear()","picky::wrappers::bundle::exactpartial#clear()","picky::categories#clear_categories()","picky::bundle#clear_configuration()","picky::indexes#clear_indexes()","picky::bundle#clear_inverted()","picky::bundle#clear_realtime()","picky::category#clear_realtime()","picky::bundle#clear_similarity()","picky::bundle#clear_weights()","picky::interfaces::liveparameters::masterchild#close_child()","array#clustered_uniq()","array#clustered_uniq_fast()","picky::category#combination_for()","analyzer#configuration_to_s()","picky::scheduler#configure()","picky::bundle#create_backends()","picky::backends::file#create_configuration()","picky::backends::memory#create_configuration()","picky::backends::redis#create_configuration()","picky::backends::sqlite#create_configuration()","picky::backends::helpers::file#create_directory()","picky::backends::file#create_inverted()","picky::backends::memory#create_inverted()","picky::backends::redis#create_inverted()","picky::backends::sqlite#create_inverted()","picky::backends::file#create_realtime()","picky::backends::memory#create_realtime()","picky::backends::redis#create_realtime()","picky::backends::sqlite#create_realtime()","picky::backends::file#create_similarity()","picky::backends::memory#create_similarity()","picky::backends::redis#create_similarity()","picky::backends::sqlite#create_similarity()","picky::backends::sqlite::array#create_table()","picky::backends::sqlite::integerkeyarray#create_table()","picky::backends::sqlite::stringkeyarray#create_table()","picky::backends::sqlite::value#create_table()","picky::backends::file#create_weights()","picky::backends::memory#create_weights()","picky::backends::redis#create_weights()","picky::backends::sqlite#create_weights()","picky::tokenizer::default_indexing_with()","picky::tokenizer::default_searching_with()","picky::backends::file::basic#delete()","picky::backends::internal#delete()","picky::backends::memory::basic#delete()","picky::backends::redis::directlymanipulable#delete()","picky::backends::redis::list#delete()","picky::backends::redis::string#delete()","picky::backends::sqlite::array#delete()","picky::backends::sqlite::directlymanipulable#delete()","picky::backends::sqlite::value#delete()","picky::bundle#delete()","picky::generators::weights::stub#delete()","string#double_metaphone()","symbol#double_metaphone()","picky::tokenizer#downcase?()","picky::backends::sqlite::basic#drop_table()","picky::backends::file::json#dump()","picky::backends::memory::json#dump()","picky::backends::memory::marshal#dump()","picky::backends::prepared::text#dump()","picky::backends::redis::list#dump()","picky::backends::redis::string#dump()","picky::backends::sqlite::basic#dump()","picky::bundle#dump()","picky::category#dump()","picky::loggers::concise#dump()","picky::loggers::silent#dump()","picky::loggers::verbose#dump()","picky::wrappers::bundle::exactpartial#dump()","picky::wrappers::bundle::location#dump()","picky::backends::memory::json#dump_json()","picky::backends::memory::marshal#dump_marshal()","picky::backends::sqlite::basic#dump_sqlite()","picky::results#duration()","picky::category#each_bundle()","picky::categories#each_category()","picky::category#each_category()","module#each_delegate()","string#each_intoken()","symbol#each_intoken()","picky::generators::partial::infix#each_partial()","picky::generators::partial::none#each_partial()","picky::generators::partial::substring#each_partial()","picky::generators::partial::substringgenerator#each_subtoken()","string#each_subtoken()","symbol#each_subtoken()","picky::backends::file::basic#empty()","picky::backends::memory::basic#empty()","picky::backends::redis::basic#empty()","picky::backends::sqlite::basic#empty()","picky::bundle#empty()","picky::category#empty()","picky::wrappers::bundle::exactpartial#empty()","picky::tokenizer#empty_tokens()","picky::generators::similarity::doublemetaphone#encode()","picky::generators::similarity::metaphone#encode()","picky::generators::similarity::none#encode()","picky::generators::similarity::soundex#encode()","object#exclaim()","picky::search#execute()","picky::capistrano::all#execute_rake_task()","picky::query::indexes#expand_combinations_from()","picky::results::exactfirst::extend_each_of()","picky::capistrano::all::extended()","picky::capistrano::caching::extended()","picky::capistrano::deploy::extended()","picky::capistrano::overrides::extended()","picky::capistrano::standard::extended()","picky::capistrano::statistics::extended()","picky::pool::extended()","picky::results::exactfirst::extended()","picky::sinatra::extended()","picky::sinatra::indexactions::extended()","picky::backends::file::basic#extension()","picky::backends::file::json#extension()","picky::backends::memory::basic#extension()","picky::backends::memory::json#extension()","picky::backends::memory::marshal#extension()","picky::backends::prepared::text#extension()","picky::api::search::boost#extract_boosts()","picky::api::tokenizer::charactersubstituter#extract_character_substituter()","picky::interfaces::liveparameters::masterchild#extract_configuration()","picky::backends::redis::extract_host()","picky::api::category::partial#extract_partial()","picky::query::token#extract_predefined()","picky::category#extract_qualifiers_from()","picky::api::category::similarity#extract_similarity()","picky::api::source#extract_source()","picky::api::tokenizer#extract_tokenizer()","picky::api::category::weight#extract_weight()","picky::index#facets()","picky::search#facets()","picky::scheduler#finish()","picky::indexers::parallel#flush()","picky::indexers::serial#flush()","picky::loggers::silent#flush()","picky::scheduler#fork?()","picky::category#from()","picky::generators::partial::substring#from()","picky::results::from()","picky::backends::redis#generate_intermediate_result_id()","picky::index#geo_categories()","picky::interfaces::liveparameters::masterchild#harakiri()","rack::harakiri#harakiri()","rack::harakiri#harakiri?()","picky::backends::redis#host()","picky::bundle#identifier()","picky::category#identifier()","picky::index#identifier()","picky::indexes::identifier()","picky::query::combination#identifier()","picky::query::token#identifier()","picky::analytics#ids()","picky::backends::backend#ids()","picky::backends::redis::ids()","picky::backends::redis#ids()","picky::bundle#ids()","picky::category#ids()","picky::query::allocation#ids()","picky::query::allocations#ids()","picky::query::combination#ids()","picky::results#ids()","picky::results::exactfirst#ids()","picky::wrappers::bundle::calculation#ids()","picky::query::indexes#ignore()","picky::search#ignore_unassigned_tokens()","object#indented_to_s()","picky::categories#index()","picky::category#index()","picky::index#index()","picky::indexes#index()","picky::indexes::index()","picky::wrappers::bundle::exactpartial#index()","analyzer#index_analysis()","picky::category#index_directory()","picky::indexers::parallel#index_flush()","picky::indexers::serial#index_flush()","picky::category#index_name()","picky::bundle#index_path()","analyzer#index_to_s()","picky::category#indexer()","picky::index#indexing()","picky::sinatra#indexing()","picky::tokenizer::indexing()","picky::loggers::concise#info()","picky::loggers::silent#info()","picky::loggers::verbose#info()","picky::backends::file::basic#initial()","picky::backends::memory::basic#initial()","picky::backends::prepared::text#initial()","picky::backends::redis::basic#initial()","picky::backends::sqlite::basic#initial()","picky::bundle#initialize_backends()","picky::categories#inject_possible_for()","picky::pool::install()","picky::category::location::install_on()","picky::indexes::instance()","class#instance_delegate()","picky::bundle#key_format()","picky::category#key_format()","picky::index#key_format()","picky::interfaces::liveparameters::masterchild#kill_each_worker_except()","picky::interfaces::liveparameters::masterchild#kill_worker()","picky::backends::sqlite::basic#lazily_initialize_client()","picky::statistics#lines_of_code()","picky::backends::file::json#load()","picky::backends::memory::json#load()","picky::backends::memory::marshal#load()","picky::backends::prepared::text#load()","picky::backends::redis::basic#load()","picky::backends::sqlite::basic#load()","picky::bundle#load()","picky::category#load()","picky::loader::load()","picky::loggers::concise#load()","picky::loggers::silent#load()","picky::loggers::verbose#load()","picky::wrappers::bundle::exactpartial#load()","picky::wrappers::bundle::location#load()","picky::loader::load_application()","picky::bundle#load_configuration()","picky::loader::load_framework()","picky::loader::load_framework_internals()","picky::bundle#load_inverted()","picky::bundle#load_realtime()","picky::loader::load_relative()","picky::loader::load_self()","picky::bundle#load_similarity()","picky::loader::load_user()","picky::loader::load_user_interface()","picky::bundle#load_weights()","picky::results#log_type()","picky::backends::redis::directlymanipulable::make()","picky::backends::sqlite::directlymanipulable::make()","picky::query::qualifiercategorymapper#map()","picky::backends::file::json#mapping()","picky::search#max_allocations()","picky::tokenizer#max_words()","picky::backends::redis#maybe_load_hiredis()","performant::array::memory_efficient_intersect()","string#metaphone()","symbol#metaphone()","analyzer::new()","picky::analytics::new()","picky::backends::file::basic::new()","picky::backends::memory::basic::new()","picky::backends::prepared::text::new()","picky::backends::redis::new()","picky::backends::redis::basic::new()","picky::backends::sqlite::new()","picky::backends::sqlite::basic::new()","picky::bundle::new()","picky::calculations::location::new()","picky::categories::new()","picky::category::new()","picky::charactersubstituters::westeuropean::new()","picky::generators::partial::infix::new()","picky::generators::partial::postfix::new()","picky::generators::partial::substring::new()","picky::generators::partial::substringgenerator::new()","picky::generators::similarity::phonetic::new()","picky::generators::weights::constant::new()","picky::generators::weights::dynamic::new()","picky::generators::weights::logarithmic::new()","picky::index::new()","picky::indexers::base::new()","picky::indexes::new()","picky::indexes::memory::new()","picky::indexes::redis::new()","picky::interfaces::liveparameters::masterchild::new()","picky::interfaces::liveparameters::masterchild::couldnotupdateconfigurationerror::new()","picky::loggers::concise::new()","picky::loggers::silent::new()","picky::query::allocation::new()","picky::query::allocations::new()","picky::query::boosts::new()","picky::query::combination::new()","picky::query::combinations::new()","picky::query::differentbackendserror::new()","picky::query::indexes::new()","picky::query::qualifiercategorymapper::new()","picky::query::token::new()","picky::query::tokens::new()","picky::results::new()","picky::scheduler::new()","picky::search::new()","picky::statistics::new()","picky::tokenizer::new()","picky::try::new()","picky::wrappers::bundle::location::new()","picky::wrappers::bundle::wrapper::new()","rack::harakiri::new()","picky::query::token::no_partial_character=()","picky::query::token::no_similar_character=()","picky::tokenizer#normalize_with_patterns()","picky::tokenizer#normalize_with_patterns?()","picky::tokenizer#normalizes_words()","picky::indexers::base#notify_finished()","picky::query::indexes#only()","picky::backends::prepared::text#open()","picky::query::tokens#originals()","picky::try#output()","picky::interfaces::liveparameters::masterchild#parameters()","picky::query::token#partial=()","picky::query::token#partial?()","picky::query::token::partial_character=()","picky::query::token#partialize()","picky::query::tokens#partialize_last()","picky::bundle#partialized()","picky::backends::redis#pid()","picky::categories#possible_categories()","picky::categories#possible_combinations()","picky::query::token#possible_combinations_in()","picky::query::tokens#possible_combinations_in()","picky::categories#possible_for()","picky::statistics#preamble()","picky::category#prepare()","picky::index#prepare()","picky::indexers::base#prepare()","picky::results#prepare!()","picky::index#prepare_in_parallel()","picky::query::indexes#prepared_allocations_for()","picky::category#prepared_index_file()","picky::category#prepared_index_path()","picky::tokenizer#preprocess()","picky::tokenizer#pretokenize()","picky::generators::similarity::phonetic#prioritize()","picky::indexers::parallel#process()","picky::indexers::serial#process()","picky::query::token#process()","picky::query::allocation#process!()","picky::query::allocations#process!()","picky::query::allocations#process_unique!()","picky::query::allocation#process_with_illegals!()","picky::query::token::processed()","picky::query::tokens::processed()","picky::loggers::concise#progress()","picky::query::token::qualifier_text_delimiter=()","picky::category#qualifiers()","picky::query::token#qualifiers()","picky::query::token::qualifiers_delimiter=()","picky::query::token#qualify()","picky::interfaces::liveparameters::masterchild#querying_removes_characters()","picky::interfaces::liveparameters::masterchild#querying_removes_characters=()","picky::interfaces::liveparameters::masterchild#querying_splits_text_on()","picky::interfaces::liveparameters::masterchild#querying_splits_text_on=()","picky::interfaces::liveparameters::masterchild#querying_stopwords()","picky::interfaces::liveparameters::masterchild#querying_stopwords=()","picky::query::indexescheck::raise_different()","picky::categories#raise_not_found()","picky::indexes#raise_not_found()","picky::calculations::location#range()","picky::index#ranged_category()","picky::query::token::redefine_illegals()","picky::backends::redis#redis_version()","picky::backends::redis#redis_with_scripting?()","picky::query::allocations#reduce_to()","picky::indexes#register()","picky::indexes::register()","picky::category#reindex()","picky::tokenizer#reject()","picky::tokenizer#rejects_token_if()","picky::pool::release_all()","picky::loader::reload()","picky::bundle#remove()","picky::category#remove()","picky::query::allocation#remove()","picky::query::allocations#remove()","picky::query::combinations#remove()","picky::query::token#remove_illegals()","picky::tokenizer#remove_illegals()","picky::tokenizer#remove_non_single_stopwords()","picky::tokenizer#remove_stopwords()","picky::interfaces::liveparameters::unicorn#remove_worker()","picky::tokenizer#removes_characters()","picky::category#replace()","picky::category#replace_from()","kernel#require_relative()","picky::backends::redis::basic#reset()","picky::backends::sqlite::basic#reset()","picky::indexers::base#reset()","picky::loggers::concise#reset()","picky::bundle#reset_backend()","picky::category#reset_backend()","picky::query::qualifiercategorymapper#restrict()","picky::query::qualifiercategorymapper#restrict_to()","picky::index#result_identifier()","picky::backends::file::json#retrieve()","picky::backends::memory::json#retrieve()","picky::backends::memory::marshal#retrieve()","picky::backends::prepared::text#retrieve()","picky::backends::redis::basic#retrieve()","picky::category#retrieve()","picky::try#saved()","picky::generators::partial::none#saved?()","picky::generators::similarity::none#saved?()","picky::generators::strategy#saved?()","picky::generators::weights::stub#saved?()","picky::scheduler#schedule()","picky::scheduler#scheduler()","picky::query::combinations#score()","picky::search#search()","picky::search#search_with()","picky::try#searched()","picky::search#searching()","picky::sinatra#searching()","picky::tokenizer::searching()","picky::bundle#similar()","picky::query::token#similar?()","picky::query::token::similar_character=()","picky::categories#similar_possible_for()","picky::categories#similar_tokens_for()","picky::query::token#similar_tokens_for()","analyzer#similarity_to_s()","picky::query::token#similarize()","picky::backends::file::json#size()","picky::backends::redis::list#size()","picky::backends::redis::string#size()","picky::backends::sqlite::array#size()","picky::query::allocations#sort!()","array#sort_by_levenshtein!()","picky::search#sorted_allocations()","string#soundex()","symbol#soundex()","picky::category#source()","picky::index#source()","picky::tokenizer#split()","picky::tokenizer#splits_text_on()","picky::console::start()","picky::interfaces::liveparameters::masterchild#start_master_process_thread()","picky::tokenizer#stopwords()","picky::charactersubstituters::westeuropean#substitute()","picky::tokenizer#substitute_characters()","picky::tokenizer#substitutes_characters_with()","picky::query::tokens#symbolize()","picky::query::token#symbolize!()","picky::backends::sqlite::basic#synchronous()","picky::search#terminate_early()","picky::helpers::measuring#timed()","object#timed_exclaim()","picky::loggers::verbose#timed_exclaim()","picky::helpers::indexing#timed_indexing()","picky::generators::partial::substring#to()","picky::query::allocations#to_a()","picky::results#to_hash()","hash#to_json()","picky::query::allocation#to_json()","picky::results#to_json()","picky::query::allocation#to_result()","picky::query::allocations#to_result()","picky::query::combination#to_result()","picky::query::combinations#to_result()","picky::query::token#to_result()","analyzer#to_s()","picky::backends::backend#to_s()","picky::backends::file::basic#to_s()","picky::backends::memory::basic#to_s()","picky::backends::redis::basic#to_s()","picky::backends::sqlite::basic#to_s()","picky::bundle#to_s()","picky::categories#to_s()","picky::category#to_s()","picky::charactersubstituters::westeuropean#to_s()","picky::generators::strategy#to_s()","picky::index#to_s()","picky::indexes#to_s()","picky::interfaces::liveparameters::masterchild#to_s()","picky::query::allocation#to_s()","picky::query::allocations#to_s()","picky::query::boosts#to_s()","picky::query::combination#to_s()","picky::query::combinations#to_s()","picky::query::differentbackendserror#to_s()","picky::query::token#to_s()","picky::query::tokens#to_s()","picky::results#to_s()","picky::search#to_s()","picky::statistics#to_s()","picky::tokenizer#to_s()","picky::index#to_stats()","picky::try#to_stdout()","picky::loggers::concise#tokenize()","picky::loggers::silent#tokenize()","picky::loggers::verbose#tokenize()","picky::tokenizer#tokenize()","picky::search#tokenized()","picky::category#tokenizer()","picky::category::location#tokenizer()","picky::index#tokenizer()","picky::indexes#tokenizer()","picky::analytics#tokens()","picky::tokenizer#tokens_for()","picky::query::allocations#total()","picky::results#total()","picky::backends::sqlite::basic#transaction()","picky::backends::sqlite::basic#truncate_db()","picky::interfaces::liveparameters::masterchild#try_updating_configuration_with()","picky::api::source#unblock_source()","picky::query::allocations#uniq!()","picky::backends::redis::directlymanipulable#unshift()","picky::backends::sqlite::directlymanipulable#unshift()","picky::category#unshift()","picky::index#unshift()","picky::generators::partial::none#use_exact_for_partial?()","picky::generators::partial::strategy#use_exact_for_partial?()","object#warn_gem_missing()","picky::backends::backend#weight()","picky::backends::redis#weight()","picky::bundle#weight()","picky::category#weight()","picky::query::combination#weight()","picky::results::exactfirst#weight()","picky::wrappers::bundle::calculation#weight()","picky::generators::weights::constant#weight_for()","picky::generators::weights::logarithmic#weight_for()","picky::generators::weights::stub#weight_for()","analyzer#weights()","analyzer#weights_analysis()","analyzer#weights_to_s()","picky::category#with_data_snapshot()","picky::index#with_data_snapshot()","picky::interfaces::liveparameters::unicorn#worker_pids()","picky::interfaces::liveparameters::masterchild#write_parent()"],"info":[["Analyzer","","classes/Analyzer.html","","<p>Analyzes indexes (index bundles, actually).\n"],["Array","","classes/Array.html","","<p>The Array class we all know and love.\n"],["Class","","classes/Class.html","","<p>The original Class class.\n"],["Hash","","classes/Hash.html","","<p>Extensions for the Hash.\n"],["Kernel","","classes/Kernel.html","",""],["Module","","classes/Module.html","","<p>The original Module class.\n"],["Object","","classes/Object.html","",""],["Performant","","classes/Performant.html","",""],["Performant::Array","","classes/Performant/Array.html","",""],["Picky","","classes/Picky.html","","<p>THINK Does it also remove diaritics, like べ to へ?\n"],["Picky::API","","classes/Picky/API.html","",""],["Picky::API::Category","","classes/Picky/API/Category.html","",""],["Picky::API::Category::Partial","","classes/Picky/API/Category/Partial.html","",""],["Picky::API::Category::Similarity","","classes/Picky/API/Category/Similarity.html","",""],["Picky::API::Category::Weight","","classes/Picky/API/Category/Weight.html","",""],["Picky::API::Search","","classes/Picky/API/Search.html","",""],["Picky::API::Search::Boost","","classes/Picky/API/Search/Boost.html","",""],["Picky::API::Source","","classes/Picky/API/Source.html","",""],["Picky::API::Tokenizer","","classes/Picky/API/Tokenizer.html","",""],["Picky::API::Tokenizer::CharacterSubstituter","","classes/Picky/API/Tokenizer/CharacterSubstituter.html","",""],["Picky::Analytics","","classes/Picky/Analytics.html","","<p>This class is wrapped around indexes and extracts useful information to be\ndisplayed in beoootiful, live-updating …\n"],["Picky::Backends","","classes/Picky/Backends.html","",""],["Picky::Backends::Backend","","classes/Picky/Backends/Backend.html","",""],["Picky::Backends::File","","classes/Picky/Backends/File.html","","<p>Naive implementation of a file-based index. In-Memory Hash with length,\noffset:\n\n<pre class=\"ruby\">{ :<span class=\"ruby-identifier\">bla</span> =<span class=\"ruby-operator\">&gt;</span> [<span class=\"ruby-value\">20</span>, <span class=\"ruby-value\">312</span>] }\n</pre>\n"],["Picky::Backends::File::Basic","","classes/Picky/Backends/File/Basic.html","","<p>Base class for all file-based index files.\n<p>Provides necessary helper methods for its subclasses. Not directly …\n"],["Picky::Backends::File::JSON","","classes/Picky/Backends/File/JSON.html","","<p>File-based index files dumped in the JSON format.\n"],["Picky::Backends::Helpers","","classes/Picky/Backends/Helpers.html","",""],["Picky::Backends::Helpers::File","","classes/Picky/Backends/Helpers/File.html","","<p>Common file helpers.\n"],["Picky::Backends::Internal","","classes/Picky/Backends/Internal.html","",""],["Picky::Backends::Memory","","classes/Picky/Backends/Memory.html","",""],["Picky::Backends::Memory::Basic","","classes/Picky/Backends/Memory/Basic.html","","<p>Base class for all memory-based index files.\n<p>Provides necessary helper methods for its subclasses. Not …\n"],["Picky::Backends::Memory::JSON","","classes/Picky/Backends/Memory/JSON.html","","<p>Memory-based index files dumped in the JSON format.\n"],["Picky::Backends::Memory::Marshal","","classes/Picky/Backends/Memory/Marshal.html","","<p>Index data in the Ruby Marshal format.\n"],["Picky::Backends::Prepared","","classes/Picky/Backends/Prepared.html","",""],["Picky::Backends::Prepared::Text","","classes/Picky/Backends/Prepared/Text.html","","<p>Index data dumped in the text format.\n"],["Picky::Backends::Redis","","classes/Picky/Backends/Redis.html","",""],["Picky::Backends::Redis::Basic","","classes/Picky/Backends/Redis/Basic.html","","<p>Redis Backend Accessor.\n<p>Provides necessary helper methods for its subclasses. Not directly useable,\nas …\n"],["Picky::Backends::Redis::DirectlyManipulable","","classes/Picky/Backends/Redis/DirectlyManipulable.html","",""],["Picky::Backends::Redis::Float","","classes/Picky/Backends/Redis/Float.html","",""],["Picky::Backends::Redis::List","","classes/Picky/Backends/Redis/List.html","",""],["Picky::Backends::Redis::String","","classes/Picky/Backends/Redis/String.html","",""],["Picky::Backends::SQLite","","classes/Picky/Backends/SQLite.html","",""],["Picky::Backends::SQLite::Array","","classes/Picky/Backends/SQLite/Array.html","",""],["Picky::Backends::SQLite::Basic","","classes/Picky/Backends/SQLite/Basic.html","",""],["Picky::Backends::SQLite::DirectlyManipulable","","classes/Picky/Backends/SQLite/DirectlyManipulable.html","",""],["Picky::Backends::SQLite::IntegerKeyArray","","classes/Picky/Backends/SQLite/IntegerKeyArray.html","",""],["Picky::Backends::SQLite::StringKeyArray","","classes/Picky/Backends/SQLite/StringKeyArray.html","",""],["Picky::Backends::SQLite::Value","","classes/Picky/Backends/SQLite/Value.html","",""],["Picky::Bundle","","classes/Picky/Bundle.html","","<p>A Bundle is a number of indexes per [index, category] combination.\n<p>At most, there are three indexes:\n<p><strong>core</strong> …\n"],["Picky::Calculations","","classes/Picky/Calculations.html","",""],["Picky::Calculations::Location","","classes/Picky/Calculations/Location.html","","<p>A location calculation recalculates a 1-d location to the Picky internal\n1-d “grid”.\n<p>For example, …\n"],["Picky::Capistrano","","classes/Picky/Capistrano.html","",""],["Picky::Capistrano::All","","classes/Picky/Capistrano/All.html","","<p>Include all\n"],["Picky::Capistrano::Caching","","classes/Picky/Capistrano/Caching.html","",""],["Picky::Capistrano::Deploy","","classes/Picky/Capistrano/Deploy.html","",""],["Picky::Capistrano::Overrides","","classes/Picky/Capistrano/Overrides.html","","<p>Removes unneeded Rails defaults.\n"],["Picky::Capistrano::Standard","","classes/Picky/Capistrano/Standard.html","",""],["Picky::Capistrano::Statistics","","classes/Picky/Capistrano/Statistics.html","",""],["Picky::Categories","","classes/Picky/Categories.html","",""],["Picky::Category","","classes/Picky/Category.html","",""],["Picky::Category::Location","","classes/Picky/Category/Location.html","",""],["Picky::Category::Picky","","classes/Picky/Category/Picky.html","",""],["Picky::Category::Picky::Category","","classes/Picky/Category/Picky/Category.html","",""],["Picky::Category::Picky::Category::Picky","","classes/Picky/Category/Picky/Category/Picky.html","",""],["Picky::Category::Picky::Category::Picky::IdNotGivenException","","classes/Picky/Category/Picky/Category/Picky/IdNotGivenException.html","",""],["Picky::CharacterSubstituters","","classes/Picky/CharacterSubstituters.html","",""],["Picky::CharacterSubstituters::WestEuropean","","classes/Picky/CharacterSubstituters/WestEuropean.html","","<p>Substitutes Umlauts like ä, ö, ü =&gt; ae, oe, ue. (and more, see specs)\n"],["Picky::Console","","classes/Picky/Console.html","","<p>Handles the IRB console for Picky.\n"],["Picky::Generators","","classes/Picky/Generators.html","","<p>encoding: utf-8\n<p>encoding: utf-8\n<p>encoding: utf-8\n"],["Picky::Generators::Partial","","classes/Picky/Generators/Partial.html","",""],["Picky::Generators::Partial::Infix","","classes/Picky/Generators/Partial/Infix.html","","<p>The subtoken partial strategy.\n<p>If given “florian” it will index “floria”, “flori”, …\n"],["Picky::Generators::Partial::None","","classes/Picky/Generators/Partial/None.html","","<p>Does not generate a partial index.\n"],["Picky::Generators::Partial::Postfix","","classes/Picky/Generators/Partial/Postfix.html","",""],["Picky::Generators::Partial::Strategy","","classes/Picky/Generators/Partial/Strategy.html","","<p>Superclass for partial strategies.\n"],["Picky::Generators::Partial::Substring","","classes/Picky/Generators/Partial/Substring.html","","<p>The subtoken partial strategy.\n<p>If given “florian” it will index “floria”, “flori”, …\n"],["Picky::Generators::Partial::SubstringGenerator","","classes/Picky/Generators/Partial/SubstringGenerator.html","","<p>Generates the right substrings for use in the substring strategy.\n"],["Picky::Generators::Similarity","","classes/Picky/Generators/Similarity.html","",""],["Picky::Generators::Similarity::DoubleMetaphone","","classes/Picky/Generators/Similarity/DoubleMetaphone.html","","<p>It’s actually a combination of double metaphone and Levenshtein.\n<p>It uses the double metaphone to get similar …\n"],["Picky::Generators::Similarity::Metaphone","","classes/Picky/Generators/Similarity/Metaphone.html","","<p>It’s actually a combination of metaphone and Levenshtein.\n<p>It uses the metaphone to get similar words and …\n"],["Picky::Generators::Similarity::None","","classes/Picky/Generators/Similarity/None.html","","<p>Similarity strategy that does nothing.\n"],["Picky::Generators::Similarity::Phonetic","","classes/Picky/Generators/Similarity/Phonetic.html","","<p>It’s actually a combination of double metaphone and Levenshtein.\n<p>It uses the double metaphone to get similar …\n"],["Picky::Generators::Similarity::Soundex","","classes/Picky/Generators/Similarity/Soundex.html","","<p>It’s actually a combination of soundex and Levenshtein.\n<p>It uses the soundex to get similar words and ranks …\n"],["Picky::Generators::Similarity::Strategy","","classes/Picky/Generators/Similarity/Strategy.html","","<p>Base class for all similarity strategies.\n"],["Picky::Generators::Strategy","","classes/Picky/Generators/Strategy.html","",""],["Picky::Generators::Weights","","classes/Picky/Generators/Weights.html","",""],["Picky::Generators::Weights::Constant","","classes/Picky/Generators/Weights/Constant.html","","<p>Uses a constant weight. Default is 0.0.\n<p>Note: This is not saved.\n<p>Examples:\n"],["Picky::Generators::Weights::Dynamic","","classes/Picky/Generators/Weights/Dynamic.html","","<p>Uses a dynamic weight.\n<p>Note: This is not saved.\n<p>Examples:\n"],["Picky::Generators::Weights::Logarithmic","","classes/Picky/Generators/Weights/Logarithmic.html","","<p>Uses a logarithmic weight.\n<p>If given a constant, this will be added to the weight.\n<p>If for a key k we have …\n"],["Picky::Generators::Weights::Strategy","","classes/Picky/Generators/Weights/Strategy.html","","<p>Superclass for weighing strategies.\n"],["Picky::Generators::Weights::Stub","","classes/Picky/Generators/Weights/Stub.html","","<p>Is used for runtime-only strategies.\n<p>Note: Pretends to be a backend but\n\n<pre>does nothing at all.</pre>\n"],["Picky::Helpers","","classes/Picky/Helpers.html","","<p>Helper methods for measuring, benchmarking, logging.\n<p>Helper methods for measuring, benchmarking, logging. …\n"],["Picky::Helpers::Indexing","","classes/Picky/Helpers/Indexing.html","",""],["Picky::Helpers::Measuring","","classes/Picky/Helpers/Measuring.html","",""],["Picky::Index","","classes/Picky/Index.html","","<p>Picky Indexes\n<p>A Picky Index defines\n<p>what backend it uses.\n"],["Picky::Indexers","","classes/Picky/Indexers.html","",""],["Picky::Indexers::Base","","classes/Picky/Indexers/Base.html","",""],["Picky::Indexers::Parallel","","classes/Picky/Indexers/Parallel.html","","<p>Uses a number of categories, a source, and a tokenizer to index data.\n<p>The tokenizer is taken from each …\n"],["Picky::Indexers::Serial","","classes/Picky/Indexers/Serial.html","","<p>Uses a category to index its data.\n<p>Note: It is called serial since it indexes each category separately. …\n"],["Picky::Indexes","","classes/Picky/Indexes.html","","<p>Holds all indexes and provides operations for extracting and working on\nthem.\n<p>Delegates a number of operations …\n"],["Picky::Indexes::Memory","","classes/Picky/Indexes/Memory.html","",""],["Picky::Indexes::Redis","","classes/Picky/Indexes/Redis.html","",""],["Picky::Interfaces","","classes/Picky/Interfaces.html","","<p>This is very optional. Only load if the user wants it.\n<p>This is very optional. Only load if the user wants …\n"],["Picky::Interfaces::LiveParameters","","classes/Picky/Interfaces/LiveParameters.html","",""],["Picky::Interfaces::LiveParameters::MasterChild","","classes/Picky/Interfaces/LiveParameters/MasterChild.html","","<p>This is an interface that provides the user of Picky with the possibility\nto change parameters while …\n"],["Picky::Interfaces::LiveParameters::MasterChild::CouldNotUpdateConfigurationError","","classes/Picky/Interfaces/LiveParameters/MasterChild/CouldNotUpdateConfigurationError.html","",""],["Picky::Interfaces::LiveParameters::Unicorn","","classes/Picky/Interfaces/LiveParameters/Unicorn.html","","<p>This is an interface that provides the user of Picky with the possibility\nto change parameters while …\n"],["Picky::Loader","","classes/Picky/Loader.html","","<p>Loads the search engine and it\n"],["Picky::Loggers","","classes/Picky/Loggers.html","",""],["Picky::Loggers::Concise","","classes/Picky/Loggers/Concise.html","","<p>The verbose logger outputs little information.\n"],["Picky::Loggers::Silent","","classes/Picky/Loggers/Silent.html","","<p>The silent logger just gobbles up all information.\n"],["Picky::Loggers::Verbose","","classes/Picky/Loggers/Verbose.html","","<p>The verbose logger outputs all information.\n"],["Picky::Performant","","classes/Picky/Performant.html","",""],["Picky::Pool","","classes/Picky/Pool.html","","<p>Module that handles object pool behaviour for you.\n"],["Picky::Query","","classes/Picky/Query.html","","<p>coding: utf-8\n<p>encoding: utf-8\n"],["Picky::Query::Allocation","","classes/Picky/Query/Allocation.html","","<p>An Allocation contains an ordered list of tuples (Combinations). The\nCombinations are ordered according …\n"],["Picky::Query::Allocations","","classes/Picky/Query/Allocations.html","","<p>Container class for Allocation s.\n<p>This class is asked by the Results class to compile and process a query. …\n"],["Picky::Query::Boosts","","classes/Picky/Query/Boosts.html","","<p>Calculates boosts for combinations.\n<p>Example:\n\n<pre>Someone searches for peter fish.\nPicky might match this to ...</pre>\n"],["Picky::Query::Combination","","classes/Picky/Query/Combination.html","","<p>Describes the Combination of a Token (the text) and the index (the bundle):\n[text, index_bundle].\n<p>An  …\n"],["Picky::Query::Combinations","","classes/Picky/Query/Combinations.html","","<p>Combinations represent an ordered list of Combination s.\n<p>Combinations contain methods for calculating …\n"],["Picky::Query::DifferentBackendsError","","classes/Picky/Query/DifferentBackendsError.html","","<p>Currently it isn’t possible using Memory and Redis etc. indexes in the same\nquery index group.\n"],["Picky::Query::Indexes","","classes/Picky/Query/Indexes.html","","<p>The query indexes class bundles indexes given to a query.\n<p>Example:\n\n<pre># If you call\nSearch.new dvd_index, ...</pre>\n"],["Picky::Query::IndexesCheck","","classes/Picky/Query/IndexesCheck.html","",""],["Picky::Query::QualifierCategoryMapper","","classes/Picky/Query/QualifierCategoryMapper.html","","<p>Collection class for qualifiers.\n"],["Picky::Query::Token","","classes/Picky/Query/Token.html","","<p>This is a query token. Together with other tokens it makes up a query.\n<p>It remembers the original form, …\n"],["Picky::Query::Tokens","","classes/Picky/Query/Tokens.html","","<p>This class primarily handles switching through similar token\nconstellations.\n"],["Picky::Results","","classes/Picky/Results.html","","<p>This is the internal results object. Usually, to_marshal, or to_json is\ncalled on it to get a string …\n"],["Picky::Results::ExactFirst","","classes/Picky/Results/ExactFirst.html","","<p>This index combines an exact and partial index. It serves to order the\nresults such that exact hits are …\n"],["Picky::Scheduler","","classes/Picky/Scheduler.html","",""],["Picky::Search","","classes/Picky/Search.html","","<p>Picky Searches\n<p>A Picky Search is an object which:\n<p>holds one or more indexes\n"],["Picky::Sinatra","","classes/Picky/Sinatra.html","","<p>This Module is used to install delegator methods into the class for use\nwith Sinatra.\n"],["Picky::Sinatra::IndexActions","","classes/Picky/Sinatra/IndexActions.html","",""],["Picky::Statistics","","classes/Picky/Statistics.html","","<p>Gathers various statistics.\n"],["Picky::Tokenizer","","classes/Picky/Tokenizer.html","","<p>Defines tokenizing processes used both in indexing and querying.\n"],["Picky::Try","","classes/Picky/Try.html","","<p>Try is used by\n\n<pre>rake try[text,index,category]</pre>\n<p>to test how the text would be indexed and processed during …\n"],["Picky::Wrappers","","classes/Picky/Wrappers.html","",""],["Picky::Wrappers::Bundle","","classes/Picky/Wrappers/Bundle.html","","<p>Per Bundle wrappers.\n"],["Picky::Wrappers::Bundle::Calculation","","classes/Picky/Wrappers/Bundle/Calculation.html","","<p>A calculation rewrites the symbol into a float.\n<p>Note: A calculation will try to find a float in the index, …\n"],["Picky::Wrappers::Bundle::Delegator","","classes/Picky/Wrappers/Bundle/Delegator.html","",""],["Picky::Wrappers::Bundle::ExactPartial","","classes/Picky/Wrappers/Bundle/ExactPartial.html","","<p>This index combines a partial and exact bundle such that a partial index\nwill not be dumped or generated. …\n"],["Picky::Wrappers::Bundle::IndexedDelegator","","classes/Picky/Wrappers/Bundle/IndexedDelegator.html","",""],["Picky::Wrappers::Bundle::IndexingDelegator","","classes/Picky/Wrappers/Bundle/IndexingDelegator.html","",""],["Picky::Wrappers::Bundle::Location","","classes/Picky/Wrappers/Bundle/Location.html","","<p>A location calculation recalculates a location to the Picky internal\nlocation.\n"],["Picky::Wrappers::Bundle::Wrapper","","classes/Picky/Wrappers/Bundle/Wrapper.html","","<p>Base wrapper. Just delegates all methods to the bundle.\n"],["Rack","","classes/Rack.html","",""],["Rack::Harakiri","","classes/Rack/Harakiri.html","","<p>Simple Rack Middleware to kill Unicorns after X requests.\n<p>Use as follows in e.g. your rackup File:\n\n<pre>Rack::Harakiri.after ...</pre>\n"],["String","","classes/String.html","","<p>Extending the String class.\n"],["Symbol","","classes/Symbol.html","","<p>Extending the Symbol class.\n"],["+","Picky::Query::Tokens","classes/Picky/Query/Tokens.html#method-i-2B","(other)","<p>Non-destructive addition.\n"],["<<","Picky::Backends::Redis::DirectlyManipulable","classes/Picky/Backends/Redis/DirectlyManipulable.html#method-i-3C-3C","(value)",""],["<<","Picky::Backends::SQLite::DirectlyManipulable","classes/Picky/Backends/SQLite/DirectlyManipulable.html#method-i-3C-3C","(value)",""],["<<","Picky::Categories","classes/Picky/Categories.html#method-i-3C-3C","(category)","<p>Add the given category to the list of categories.\n"],["<<","Picky::Category","classes/Picky/Category.html#method-i-3C-3C","(thing)","<p>Add at the end.\n"],["<<","Picky::Index","classes/Picky/Index.html#method-i-3C-3C","(thing)","<p>Add at the end.\n"],["<=>","Picky::Query::Allocation","classes/Picky/Query/Allocation.html#method-i-3C-3D-3E","(other_allocation)","<p>Sort highest score first.\n"],["==","Picky::Query::Boosts","classes/Picky/Query/Boosts.html#method-i-3D-3D","(other)","<p>A Weights instance is == to another if the weights are the same.\n"],["==","Picky::Query::Token","classes/Picky/Query/Token.html#method-i-3D-3D","(other)","<p>If the originals &amp; the text are the same, they are the same.\n"],["==","Picky::Query::Tokens","classes/Picky/Query/Tokens.html#method-i-3D-3D","(other)",""],["[]","Picky::Backends::File::JSON","classes/Picky/Backends/File/JSON.html#method-i-5B-5D","(key)","<p>See lib/picky/backends/file.rb for what this should return.\n<p>Gets the length and offset for the key.\n<p>Extracts …\n"],["[]","Picky::Backends::Redis::Float","classes/Picky/Backends/Redis/Float.html#method-i-5B-5D","(key)","<p>Get a single value.\n<p>Internal API method for the index.\n<p>Note: Works like the StringHash method, but returns …\n"],["[]","Picky::Backends::Redis::List","classes/Picky/Backends/Redis/List.html#method-i-5B-5D","(key)","<p>Get a collection.\n<p>Internal API method for the index.\n"],["[]","Picky::Backends::Redis::String","classes/Picky/Backends/Redis/String.html#method-i-5B-5D","(key)","<p>Get a single value.\n<p>Internal API method for the index.\n"],["[]","Picky::Backends::SQLite::Array","classes/Picky/Backends/SQLite/Array.html#method-i-5B-5D","(key)",""],["[]","Picky::Backends::SQLite::Value","classes/Picky/Backends/SQLite/Value.html#method-i-5B-5D","(key)",""],["[]","Picky::Bundle","classes/Picky/Bundle.html#method-i-5B-5D","(sym_or_string)","<p>Get settings for this bundle.\n<p>Returns an object.\n"],["[]","Picky::Categories","classes/Picky/Categories.html#method-i-5B-5D","(category_name)","<p>Find a given category in the categories.\n"],["[]","Picky::Generators::Weights::Constant","classes/Picky/Generators/Weights/Constant.html#method-i-5B-5D","(_)","<p>Always returns the constant weight, except if there are no ids.\n"],["[]","Picky::Generators::Weights::Dynamic","classes/Picky/Generators/Weights/Dynamic.html#method-i-5B-5D","(str_or_sym)","<p>Calls the block to calculate the weight.\n"],["[]","Picky::Indexes","classes/Picky/Indexes.html#method-i-5B-5D","(identifier)","<p>Extracts an index, given its identifier.\n"],["[]=","Picky::Backends::Redis::List","classes/Picky/Backends/Redis/List.html#method-i-5B-5D-3D","(key, values)","<p>Set a single list.\n"],["[]=","Picky::Backends::Redis::String","classes/Picky/Backends/Redis/String.html#method-i-5B-5D-3D","(key, value)","<p>Set a single value\n"],["[]=","Picky::Backends::SQLite::Array","classes/Picky/Backends/SQLite/Array.html#method-i-5B-5D-3D","(key, array)",""],["[]=","Picky::Backends::SQLite::Value","classes/Picky/Backends/SQLite/Value.html#method-i-5B-5D-3D","(key, value)",""],["[]=","Picky::Generators::Weights::Stub","classes/Picky/Generators/Weights/Stub.html#method-i-5B-5D-3D","(_, _)","<p>Saves nothing by default.\n"],["add","Picky::Bundle","classes/Picky/Bundle.html#method-i-add","(id, str_or_sym, where = :unshift)","<p>Returns a reference to the array where the id has been added.\n"],["add","Picky::Category","classes/Picky/Category.html#method-i-add","(object, where = :unshift)","<p>Adds and indexes this category of the given object.\n"],["add","Picky::Pool","classes/Picky/Pool.html#method-c-add","(klass)","<p>Add a pooled class to the managed pools.\n"],["add","Picky::Query::QualifierCategoryMapper","classes/Picky/Query/QualifierCategoryMapper.html#method-i-add","(category)",""],["add","Picky::Wrappers::Bundle::Location","classes/Picky/Wrappers/Bundle/Location.html#method-i-add","(id, location, where = :unshift)","<p>Recalculates the added location.\n"],["add_margin","Picky::Calculations::Location","classes/Picky/Calculations/Location.html#method-i-add_margin","(length)",""],["add_partialized","Picky::Bundle","classes/Picky/Bundle.html#method-i-add_partialized","(id, text, where = :unshift)","<p>Partializes the text and then adds each.\n"],["add_partialized","Picky::Wrappers::Bundle::Location","classes/Picky/Wrappers/Bundle/Location.html#method-i-add_partialized","(does_not, matter, at_all)","<p>Do not generate a partial.\n"],["add_similarity","Picky::Bundle","classes/Picky/Bundle.html#method-i-add_similarity","(str_or_sym, where = :unshift)","<p>Add string/symbol to similarity index.\n"],["add_text","Picky::Category","classes/Picky/Category.html#method-i-add_text","(id, text, where = :unshift)","<p>For the given id, adds the list of strings to the index for the given id.\n"],["add_tokenized_token","Picky::Category","classes/Picky/Category.html#method-i-add_tokenized_token","(id, text, where = :unshift, format = true)",""],["after_indexing","Picky::Index","classes/Picky/Index.html#method-i-after_indexing","(after_indexing = nil)","<p>Define what to do after indexing. (Only used in the Sources::DB)\n"],["allocation_for","Picky::Query::Indexes","classes/Picky/Query/Indexes.html#method-i-allocation_for","(tokens, index)",""],["allocations_ary_for","Picky::Query::Indexes","classes/Picky/Query/Indexes.html#method-i-allocations_ary_for","(tokens)",""],["allocations_for","Picky::Query::Indexes","classes/Picky/Query/Indexes.html#method-i-allocations_for","(tokens)","<p>Returns a number of possible allocations for the given tokens.\n"],["analyze","Analyzer","classes/Analyzer.html#method-i-analyze","(bundle)",""],["analyze","Picky::Statistics","classes/Picky/Statistics.html#method-i-analyze","(object)","<p>Gathers information about the indexes.\n"],["anchor=","Picky::Calculations::Location","classes/Picky/Calculations/Location.html#method-i-anchor-3D","(value)",""],["application","Picky::Statistics","classes/Picky/Statistics.html#method-i-application","()","<p>Gathers information about the application.\n"],["asynchronous","Picky::Backends::SQLite::Basic","classes/Picky/Backends/SQLite/Basic.html#method-i-asynchronous","()",""],["at_least_version","Picky::Backends::Redis","classes/Picky/Backends/Redis.html#method-i-at_least_version","(major_minor_patch, should_be)","<p>Compares two versions each in an array [major, minor, patch] format and\nreturns true if the first version …\n"],["backend","Picky::Bundle","classes/Picky/Bundle.html#method-i-backend","()","<p>If no specific backend has been set, uses the category’s backend.\n"],["backend","Picky::Index","classes/Picky/Index.html#method-i-backend","(backend = nil)","<p>API method.\n<p>Sets/returns the backend used. Default is @Backends::Memory.new@.\n"],["boost","Picky::Search","classes/Picky/Search.html#method-i-boost","(boosts)","<p>Examples:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">search</span> = <span class=\"ruby-constant\">Search</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-identifier\">books_index</span>, <span class=\"ruby-identifier\">dvd_index</span>, <span class=\"ruby-identifier\">mp3_index</span>) <span class=\"ruby-keyword\">do</span>\n  <span class=\"ruby-identifier\">boost</span> [:<span class=\"ruby-identifier\">author</span>, :<span class=\"ruby-identifier\">title</span>] =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">+3</span>,\n <span class=\"ruby-operator\">...</span>\n</pre>\n"],["boost_for","Picky::Query::Boosts","classes/Picky/Query/Boosts.html#method-i-boost_for","(combinations)","<p>API.\n<p>Calculates a score for the combinations. Implement\n#weight_for(category_names) if you don’t need …\n"],["boost_for","Picky::Query::Combinations","classes/Picky/Query/Combinations.html#method-i-boost_for","(weights)",""],["boost_for_categories","Picky::Query::Boosts","classes/Picky/Query/Boosts.html#method-i-boost_for_categories","(names)","<p>API.\n<p>Get the boost for an array of category names.\n<p>Example:\n"],["build_realtime","Picky::Bundle","classes/Picky/Bundle.html#method-i-build_realtime","()","<p>Builds the realtime mapping.\n<p>Note: Experimental feature. Might be removed in 5.0.\n<p>THINK Maybe load it and …\n"],["build_realtime_mapping","Picky::Category","classes/Picky/Category.html#method-i-build_realtime_mapping","()","<p>Builds the realtime mapping.\n"],["bundle","Picky::Query::Combination","classes/Picky/Query/Combination.html#method-i-bundle","()",""],["bundle_for","Picky::Category","classes/Picky/Category.html#method-i-bundle_for","(token)","<p>Returns the right index bundle for this token.\n"],["cache","Picky::Category","classes/Picky/Category.html#method-i-cache","(scheduler = Scheduler.new)","<p>Generates all caches for this category.\n"],["calculate","Picky::Calculations::Location","classes/Picky/Calculations/Location.html#method-i-calculate","(location)",""],["calculate","Picky::Wrappers::Bundle::Calculation","classes/Picky/Wrappers/Bundle/Calculation.html#method-i-calculate","(float)","<p>API.\n<p>By default, a calculation does not calculate anything.\n"],["calculate","Picky::Wrappers::Bundle::Location","classes/Picky/Wrappers/Bundle/Location.html#method-i-calculate","(float)",""],["calculate_ids","Picky::Query::Allocation","classes/Picky/Query/Allocation.html#method-i-calculate_ids","(amount, offset)","<p>Asks the backend for the (intersected) ids.\n<p>Note: Combinations can be empty on eg. query “alan history” …\n"],["calculate_score","Picky::Query::Allocation","classes/Picky/Query/Allocation.html#method-i-calculate_score","(weights)","<p>Asks the backend for the total score and adds the boosts to it.\n<p>Note: Combinations can be empty on eg. …\n"],["calculate_score","Picky::Query::Allocations","classes/Picky/Query/Allocations.html#method-i-calculate_score","(weights)","<p>Score each allocation.\n"],["calculate_total","Picky::Query::Allocations","classes/Picky/Query/Allocations.html#method-i-calculate_total","()",""],["calculated_range","Picky::Calculations::Location","classes/Picky/Calculations/Location.html#method-i-calculated_range","(location)",""],["call","Rack::Harakiri","classes/Rack/Harakiri.html#method-i-call","(env)","<p>#call interface method.\n<p>Harakiri is a middleware, so it delegates the the app or the next\nmiddleware after …\n"],["cap","Picky::Tokenizer","classes/Picky/Tokenizer.html#method-i-cap","(words)",""],["cap?","Picky::Tokenizer","classes/Picky/Tokenizer.html#method-i-cap-3F","(words)",""],["cardinality","Analyzer","classes/Analyzer.html#method-i-cardinality","(identifier, index)",""],["case_sensitive","Picky::Tokenizer","classes/Picky/Tokenizer.html#method-i-case_sensitive","(case_sensitive)","<p>Case sensitivity.\n<p>Note: If false, simply downcases the data/query.\n"],["categorize","Picky::Query::Token","classes/Picky/Query/Token.html#method-i-categorize","(mapper)","<p>Translates this token’s qualifiers into actual categories.\n<p>Note: If this is not done, there is no mapping. …\n"],["categorize","Picky::Query::Tokens","classes/Picky/Query/Tokens.html#method-i-categorize","(mapper)",""],["categorize_with","Picky::Query::Token","classes/Picky/Query/Token.html#method-i-categorize_with","(mapper, qualifiers)",""],["category","Picky::Index","classes/Picky/Index.html#method-i-category","(category_name, options = {})","<p>API method.\n<p>Defines a searchable category on the index.\n<p>Parameters\n"],["category_name","Picky::Query::Combination","classes/Picky/Query/Combination.html#method-i-category_name","()","<p>Returns the category’s name.\n"],["check","Picky::Indexers::Base","classes/Picky/Indexers/Base.html#method-i-check","(source)",""],["check_argument_in","Picky::Tokenizer","classes/Picky/Tokenizer.html#method-i-check_argument_in","(method, type, argument, &condition)","<p>Checks if the right argument type has been given.\n"],["check_backends","Picky::Query::IndexesCheck","classes/Picky/Query/IndexesCheck.html#method-c-check_backends","(indexes)","<p>Returns the right combinations strategy for a number of query indexes.\n<p>Currently it isn’t possible using …\n"],["check_gem","Picky::Generators::Similarity::Phonetic","classes/Picky/Generators/Similarity/Phonetic.html#method-i-check_gem","()","<p>Tries to require the text gem.\n"],["check_hiredis_gem","Picky::Backends::Redis","classes/Picky/Backends/Redis.html#method-i-check_hiredis_gem","()",""],["check_redis_gem","Picky::Backends::Redis","classes/Picky/Backends/Redis.html#method-i-check_redis_gem","()",""],["check_source_empty","Picky::Index","classes/Picky/Index.html#method-i-check_source_empty","()","<p>Check if the given enumerable source is empty.\n<p>Note: Checking as early as possible to tell the\n\n<pre>user as ...</pre>\n"],["clear","Picky::Backends::File::JSON","classes/Picky/Backends/File/JSON.html#method-i-clear","()","<p>Clears the currently loaded index.\n<p>Note: This only clears the in-memory mapping,\n\n<pre>but this is enough for ...</pre>\n"],["clear","Picky::Backends::Internal","classes/Picky/Backends/Internal.html#method-i-clear","()","<p>It does not need to be cleared.\n"],["clear","Picky::Backends::Redis::List","classes/Picky/Backends/Redis/List.html#method-i-clear","()","<p>Clear the index for this list.\n<p>Note: Perhaps we can use a server only command.\n\n<pre>This is not the optimal ...</pre>\n"],["clear","Picky::Backends::Redis::String","classes/Picky/Backends/Redis/String.html#method-i-clear","()","<p>Clears the hash.\n"],["clear","Picky::Backends::SQLite::Basic","classes/Picky/Backends/SQLite/Basic.html#method-i-clear","()",""],["clear","Picky::Bundle","classes/Picky/Bundle.html#method-i-clear","()","<p>Clears all indexes.\n"],["clear","Picky::Category","classes/Picky/Category.html#method-i-clear","()","<p>Clears the caches.\n<p>THINK about the semantics of clear. Is a delete even needed or is it\nclear+dump?\n"],["clear","Picky::Generators::Weights::Stub","classes/Picky/Generators/Weights/Stub.html#method-i-clear","()","<p>It does not need to be cleared.\n"],["clear","Picky::Pool","classes/Picky/Pool.html#method-c-clear","()","<p>Initialise/Reset the pool.\n"],["clear","Picky::Wrappers::Bundle::ExactPartial","classes/Picky/Wrappers/Bundle/ExactPartial.html#method-i-clear","()","<p>Ignore these.\n"],["clear_categories","Picky::Categories","classes/Picky/Categories.html#method-i-clear_categories","()","<p>Clears both the array of categories and the hash of categories.\n"],["clear_configuration","Picky::Bundle","classes/Picky/Bundle.html#method-i-clear_configuration","()","<p>Clears the configuration.\n"],["clear_indexes","Picky::Indexes","classes/Picky/Indexes.html#method-i-clear_indexes","()","<p>Clears the indexes and the mapping.\n"],["clear_inverted","Picky::Bundle","classes/Picky/Bundle.html#method-i-clear_inverted","()","<p>Clears the core index.\n"],["clear_realtime","Picky::Bundle","classes/Picky/Bundle.html#method-i-clear_realtime","()","<p>Clears the realtime mapping.\n"],["clear_realtime","Picky::Category","classes/Picky/Category.html#method-i-clear_realtime","()","<p>Clears the realtime mapping.\n"],["clear_similarity","Picky::Bundle","classes/Picky/Bundle.html#method-i-clear_similarity","()","<p>Clears the similarity index.\n"],["clear_weights","Picky::Bundle","classes/Picky/Bundle.html#method-i-clear_weights","()","<p>Clears the weights index.\n"],["close_child","Picky::Interfaces::LiveParameters::MasterChild","classes/Picky/Interfaces/LiveParameters/MasterChild.html#method-i-close_child","()","<p>Close the child if it isn’t yet closed.\n"],["clustered_uniq","Array","classes/Array.html#method-i-clustered_uniq","()","<p>Cluster-uniqs equal neighborly elements.\n<p>Returns a copy.\n"],["clustered_uniq_fast","Array","classes/Array.html#method-i-clustered_uniq_fast","()","<p>Around 10% faster than the above.\n<p>Returns a copy.\n"],["combination_for","Picky::Category","classes/Picky/Category.html#method-i-combination_for","(token)","<p>Returns a combination for the token, or nil, if there is none.\n"],["configuration_to_s","Analyzer","classes/Analyzer.html#method-i-configuration_to_s","()",""],["configure","Picky::Scheduler","classes/Picky/Scheduler.html#method-i-configure","()",""],["create_backends","Picky::Bundle","classes/Picky/Bundle.html#method-i-create_backends","()","<p>Extract specific indexes from backend.\n"],["create_configuration","Picky::Backends::File","classes/Picky/Backends/File.html#method-i-create_configuration","(bundle)","<p>Returns an object that on #initial, #load returns an object that responds\nto:\n\n<pre class=\"ruby\">[:<span class=\"ruby-identifier\">key</span>] <span class=\"ruby-comment\"># =&gt; value (a value ...</span>\n</pre>\n"],["create_configuration","Picky::Backends::Memory","classes/Picky/Backends/Memory.html#method-i-create_configuration","(bundle)","<p>Returns an object that on #initial, #load returns an object that responds\nto:\n\n<pre class=\"ruby\">[:<span class=\"ruby-identifier\">key</span>] <span class=\"ruby-comment\"># =&gt; value (a value ...</span>\n</pre>\n"],["create_configuration","Picky::Backends::Redis","classes/Picky/Backends/Redis.html#method-i-create_configuration","(bundle)","<p>Returns an object that on #initial, #load returns an object that responds\nto:\n\n<pre class=\"ruby\">[:<span class=\"ruby-identifier\">key</span>] <span class=\"ruby-comment\"># =&gt; value (a value ...</span>\n</pre>\n"],["create_configuration","Picky::Backends::SQLite","classes/Picky/Backends/SQLite.html#method-i-create_configuration","(bundle)","<p>Returns an object that on #initial, #load returns an object that responds\nto:\n\n<pre class=\"ruby\">[:<span class=\"ruby-identifier\">key</span>] <span class=\"ruby-comment\"># =&gt; value (a value ...</span>\n</pre>\n"],["create_directory","Picky::Backends::Helpers::File","classes/Picky/Backends/Helpers/File.html#method-i-create_directory","(path)","<p>Creates all necessary directories.\n"],["create_inverted","Picky::Backends::File","classes/Picky/Backends/File.html#method-i-create_inverted","(bundle)","<p>Returns an object that on #initial, #load returns an object that responds\nto:\n\n<pre class=\"ruby\">[:<span class=\"ruby-identifier\">token</span>] <span class=\"ruby-comment\"># =&gt; [id, id, id, ...</span>\n</pre>\n"],["create_inverted","Picky::Backends::Memory","classes/Picky/Backends/Memory.html#method-i-create_inverted","(bundle)","<p>Returns an object that on #initial, #load returns an object that responds\nto:\n\n<pre class=\"ruby\">[:<span class=\"ruby-identifier\">token</span>] <span class=\"ruby-comment\"># =&gt; [id, id, id, ...</span>\n</pre>\n"],["create_inverted","Picky::Backends::Redis","classes/Picky/Backends/Redis.html#method-i-create_inverted","(bundle)","<p>Returns an object that on #initial, #load returns an object that responds\nto:\n\n<pre class=\"ruby\">[:<span class=\"ruby-identifier\">token</span>] <span class=\"ruby-comment\"># =&gt; [id, id, id, ...</span>\n</pre>\n"],["create_inverted","Picky::Backends::SQLite","classes/Picky/Backends/SQLite.html#method-i-create_inverted","(bundle)","<p>Returns an object that on #initial, #load returns an object that responds\nto:\n\n<pre class=\"ruby\">[:<span class=\"ruby-identifier\">token</span>] <span class=\"ruby-comment\"># =&gt; [id, id, id, ...</span>\n</pre>\n"],["create_realtime","Picky::Backends::File","classes/Picky/Backends/File.html#method-i-create_realtime","(bundle)","<p>Returns an object that on #initial, #load returns an object that responds\nto:\n\n<pre class=\"ruby\">[<span class=\"ruby-identifier\">id</span>] <span class=\"ruby-comment\"># =&gt; [:sym1, :sym2]</span>\n</pre>\n"],["create_realtime","Picky::Backends::Memory","classes/Picky/Backends/Memory.html#method-i-create_realtime","(bundle)","<p>Returns an object that on #initial, #load returns an object that responds\nto:\n\n<pre class=\"ruby\">[<span class=\"ruby-identifier\">id</span>] <span class=\"ruby-comment\"># =&gt; [:sym1, :sym2]</span>\n</pre>\n"],["create_realtime","Picky::Backends::Redis","classes/Picky/Backends/Redis.html#method-i-create_realtime","(bundle)","<p>Returns an object that on #initial, #load returns an object that responds\nto:\n\n<pre class=\"ruby\">[<span class=\"ruby-identifier\">id</span>] <span class=\"ruby-comment\"># =&gt; [:sym1, :sym2]</span>\n</pre>\n"],["create_realtime","Picky::Backends::SQLite","classes/Picky/Backends/SQLite.html#method-i-create_realtime","(bundle)","<p>Returns an object that on #initial, #load returns an object that responds\nto:\n\n<pre class=\"ruby\">[<span class=\"ruby-identifier\">id</span>] <span class=\"ruby-comment\"># =&gt; [:sym1, :sym2]</span>\n</pre>\n"],["create_similarity","Picky::Backends::File","classes/Picky/Backends/File.html#method-i-create_similarity","(bundle)","<p>Returns an object that on #initial, #load returns an object that responds\nto:\n\n<pre class=\"ruby\">[:<span class=\"ruby-identifier\">encoded</span>] <span class=\"ruby-comment\"># =&gt; [:original, ...</span>\n</pre>\n"],["create_similarity","Picky::Backends::Memory","classes/Picky/Backends/Memory.html#method-i-create_similarity","(bundle)","<p>Returns an object that on #initial, #load returns an object that responds\nto:\n\n<pre class=\"ruby\">[:<span class=\"ruby-identifier\">encoded</span>] <span class=\"ruby-comment\"># =&gt; [:original, ...</span>\n</pre>\n"],["create_similarity","Picky::Backends::Redis","classes/Picky/Backends/Redis.html#method-i-create_similarity","(bundle)","<p>Returns an object that on #initial, #load returns an object that responds\nto:\n\n<pre class=\"ruby\">[:<span class=\"ruby-identifier\">encoded</span>] <span class=\"ruby-comment\"># =&gt; [:original, ...</span>\n</pre>\n"],["create_similarity","Picky::Backends::SQLite","classes/Picky/Backends/SQLite.html#method-i-create_similarity","(bundle)","<p>Returns an object that on #initial, #load returns an object that responds\nto:\n\n<pre class=\"ruby\">[:<span class=\"ruby-identifier\">encoded</span>] <span class=\"ruby-comment\"># =&gt; [:original, ...</span>\n</pre>\n"],["create_table","Picky::Backends::SQLite::Array","classes/Picky/Backends/SQLite/Array.html#method-i-create_table","()",""],["create_table","Picky::Backends::SQLite::IntegerKeyArray","classes/Picky/Backends/SQLite/IntegerKeyArray.html#method-i-create_table","()",""],["create_table","Picky::Backends::SQLite::StringKeyArray","classes/Picky/Backends/SQLite/StringKeyArray.html#method-i-create_table","()",""],["create_table","Picky::Backends::SQLite::Value","classes/Picky/Backends/SQLite/Value.html#method-i-create_table","()",""],["create_weights","Picky::Backends::File","classes/Picky/Backends/File.html#method-i-create_weights","(bundle)","<p>Returns an object that on #initial, #load returns an object that responds\nto:\n\n<pre class=\"ruby\">[:<span class=\"ruby-identifier\">token</span>] <span class=\"ruby-comment\"># =&gt; 1.23 (a weight)</span>\n</pre>\n"],["create_weights","Picky::Backends::Memory","classes/Picky/Backends/Memory.html#method-i-create_weights","(bundle)","<p>Returns an object that on #initial, #load returns an object that responds\nto:\n\n<pre class=\"ruby\">[:<span class=\"ruby-identifier\">token</span>] <span class=\"ruby-comment\"># =&gt; 1.23 (a weight)</span>\n</pre>\n"],["create_weights","Picky::Backends::Redis","classes/Picky/Backends/Redis.html#method-i-create_weights","(bundle)","<p>Returns an object that on #initial, #load returns an object that responds\nto:\n\n<pre class=\"ruby\">[:<span class=\"ruby-identifier\">token</span>] <span class=\"ruby-comment\"># =&gt; 1.23 (a weight)</span>\n</pre>\n"],["create_weights","Picky::Backends::SQLite","classes/Picky/Backends/SQLite.html#method-i-create_weights","(bundle)","<p>Returns an object that on #initial, #load returns an object that responds\nto:\n\n<pre class=\"ruby\">[:<span class=\"ruby-identifier\">token</span>] <span class=\"ruby-comment\"># =&gt; 1.23 (a weight)</span>\n</pre>\n"],["default_indexing_with","Picky::Tokenizer","classes/Picky/Tokenizer.html#method-c-default_indexing_with","(options = {})",""],["default_searching_with","Picky::Tokenizer","classes/Picky/Tokenizer.html#method-c-default_searching_with","(options = {})",""],["delete","Picky::Backends::File::Basic","classes/Picky/Backends/File/Basic.html#method-i-delete","()","<p>Deletes the file.\n"],["delete","Picky::Backends::Internal","classes/Picky/Backends/Internal.html#method-i-delete","(_)","<p>Nothing needs to be deleted from it.\n"],["delete","Picky::Backends::Memory::Basic","classes/Picky/Backends/Memory/Basic.html#method-i-delete","()","<p>Deletes the file.\n"],["delete","Picky::Backends::Redis::DirectlyManipulable","classes/Picky/Backends/Redis/DirectlyManipulable.html#method-i-delete","(value)",""],["delete","Picky::Backends::Redis::List","classes/Picky/Backends/Redis/List.html#method-i-delete","(key)","<p>Deletes the list for the key.\n"],["delete","Picky::Backends::Redis::String","classes/Picky/Backends/Redis/String.html#method-i-delete","(key)","<p>Deletes the single value.\n"],["delete","Picky::Backends::SQLite::Array","classes/Picky/Backends/SQLite/Array.html#method-i-delete","(key)",""],["delete","Picky::Backends::SQLite::DirectlyManipulable","classes/Picky/Backends/SQLite/DirectlyManipulable.html#method-i-delete","(value)",""],["delete","Picky::Backends::SQLite::Value","classes/Picky/Backends/SQLite/Value.html#method-i-delete","(key)",""],["delete","Picky::Bundle","classes/Picky/Bundle.html#method-i-delete","()","<p>Delete all index files.\n"],["delete","Picky::Generators::Weights::Stub","classes/Picky/Generators/Weights/Stub.html#method-i-delete","(_)","<p>Nothing needs to be deleted from it.\n"],["double_metaphone","String","classes/String.html#method-i-double_metaphone","()","<p>Returns a <em>single</em> double metaphone code for this string.\n"],["double_metaphone","Symbol","classes/Symbol.html#method-i-double_metaphone","()","<p>Returns a <em>single</em> double metaphone code for this symbol.\n"],["downcase?","Picky::Tokenizer","classes/Picky/Tokenizer.html#method-i-downcase-3F","()",""],["drop_table","Picky::Backends::SQLite::Basic","classes/Picky/Backends/SQLite/Basic.html#method-i-drop_table","()",""],["dump","Picky::Backends::File::JSON","classes/Picky/Backends/File/JSON.html#method-i-dump","(hash)","<p>Dumps the index hash in json format.\n<p>Dump actual data.\n<p>Dumps mapping key =&gt; [length, offset].\n"],["dump","Picky::Backends::Memory::JSON","classes/Picky/Backends/Memory/JSON.html#method-i-dump","(internal)","<p>Dumps the index internal backend in json format.\n"],["dump","Picky::Backends::Memory::Marshal","classes/Picky/Backends/Memory/Marshal.html#method-i-dump","(internal)","<p>Dumps the index internal backend in marshal format.\n"],["dump","Picky::Backends::Prepared::Text","classes/Picky/Backends/Prepared/Text.html#method-i-dump","(hash)","<p>Text files are used exclusively for prepared data files.\n"],["dump","Picky::Backends::Redis::List","classes/Picky/Backends/Redis/List.html#method-i-dump","(hash)","<p>Writes the hash into Redis.\n"],["dump","Picky::Backends::Redis::String","classes/Picky/Backends/Redis/String.html#method-i-dump","(hash)","<p>Writes the hash into Redis.\n<p>Note: We could use multi, but it did not help.\n"],["dump","Picky::Backends::SQLite::Basic","classes/Picky/Backends/SQLite/Basic.html#method-i-dump","(internal)",""],["dump","Picky::Bundle","classes/Picky/Bundle.html#method-i-dump","()","<p>Saves the indexes in a dump file.\n"],["dump","Picky::Category","classes/Picky/Category.html#method-i-dump","()","<p>Dumps both bundles.\n"],["dump","Picky::Loggers::Concise","classes/Picky/Loggers/Concise.html#method-i-dump","(*)",""],["dump","Picky::Loggers::Silent","classes/Picky/Loggers/Silent.html#method-i-dump","(*)",""],["dump","Picky::Loggers::Verbose","classes/Picky/Loggers/Verbose.html#method-i-dump","(category)",""],["dump","Picky::Wrappers::Bundle::ExactPartial","classes/Picky/Wrappers/Bundle/ExactPartial.html#method-i-dump","()",""],["dump","Picky::Wrappers::Bundle::Location","classes/Picky/Wrappers/Bundle/Location.html#method-i-dump","()","<p>Save the config, then dump normally.\n"],["dump_json","Picky::Backends::Memory::JSON","classes/Picky/Backends/Memory/JSON.html#method-i-dump_json","(internal)","<p>Dump JSON into the cache file.\n<p>TODO Ask MultiJson people to add IO option: MultiJson.encode(object,\nout_file …\n"],["dump_marshal","Picky::Backends::Memory::Marshal","classes/Picky/Backends/Memory/Marshal.html#method-i-dump_marshal","(internal)","<p>Dumps binary self to the path given. Minus extension.\n"],["dump_sqlite","Picky::Backends::SQLite::Basic","classes/Picky/Backends/SQLite/Basic.html#method-i-dump_sqlite","(internal)",""],["duration","Picky::Results","classes/Picky/Results.html#method-i-duration","()","<p>Duration default is 0.\n"],["each_bundle","Picky::Category","classes/Picky/Category.html#method-i-each_bundle","(&block)",""],["each_category","Picky::Categories","classes/Picky/Categories.html#method-i-each_category","(&block)",""],["each_category","Picky::Category","classes/Picky/Category.html#method-i-each_category","()","<p>The category itself just yields itself.\n"],["each_delegate","Module","classes/Module.html#method-i-each_delegate","(*methods)",""],["each_intoken","String","classes/String.html#method-i-each_intoken","(min_length = 1, max_length = -1)","<p>‘keys’.each_intoken         # =&gt; yields each of [‘keys’, ‘key’, ‘eys’,\n‘ke’, ‘ey’, ‘ys’, ‘k’, ‘e’, …\n"],["each_intoken","Symbol","classes/Symbol.html#method-i-each_intoken","(min_length = 1, max_length = -1)","<p>:keys.each_intoken         # =&gt; yields each of [:keys, :key, :eys, :ke,\n:ey, :ys, :k, :e, :y, :s] …\n"],["each_partial","Picky::Generators::Partial::Infix","classes/Picky/Generators/Partial/Infix.html#method-i-each_partial","(token, &block)","<p>Yields each generated partial.\n"],["each_partial","Picky::Generators::Partial::None","classes/Picky/Generators/Partial/None.html#method-i-each_partial","(token)","<p>Yields each generated partial.\n"],["each_partial","Picky::Generators::Partial::Substring","classes/Picky/Generators/Partial/Substring.html#method-i-each_partial","(token, &block)","<p>Yields each generated partial.\n"],["each_subtoken","Picky::Generators::Partial::SubstringGenerator","classes/Picky/Generators/Partial/SubstringGenerator.html#method-i-each_subtoken","(token, &block)",""],["each_subtoken","String","classes/String.html#method-i-each_subtoken","(from_length = 1, range = nil)","<p>‘keys’.each_subtoken    # =&gt; yields each of [‘keys’, ‘key’, ‘ke’, ‘k’]\n‘keys’.each_subtoken(2) # =&gt; …\n"],["each_subtoken","Symbol","classes/Symbol.html#method-i-each_subtoken","(from_length = 1, range = nil)","<p>:keys.each_subtoken    # =&gt; yields each of [:keys, :key, :ke, :k]\n:keys.each_subtoken(2) # =&gt; yields …\n"],["empty","Picky::Backends::File::Basic","classes/Picky/Backends/File/Basic.html#method-i-empty","()","<p>The empty index that is used for putting the index together before it is\nsaved into the files.\n"],["empty","Picky::Backends::Memory::Basic","classes/Picky/Backends/Memory/Basic.html#method-i-empty","()","<p>The empty index that is used for putting the index together before it is\ndumped into the files.\n"],["empty","Picky::Backends::Redis::Basic","classes/Picky/Backends/Redis/Basic.html#method-i-empty","()","<p>The empty index that is used for putting the index together.\n"],["empty","Picky::Backends::SQLite::Basic","classes/Picky/Backends/SQLite/Basic.html#method-i-empty","()",""],["empty","Picky::Bundle","classes/Picky/Bundle.html#method-i-empty","()","<p>“Empties” the index(es) by getting a new empty internal backend instance.\n"],["empty","Picky::Category","classes/Picky/Category.html#method-i-empty","()","<p>Empty all the indexes.\n"],["empty","Picky::Wrappers::Bundle::ExactPartial","classes/Picky/Wrappers/Bundle/ExactPartial.html#method-i-empty","()",""],["empty_tokens","Picky::Tokenizer","classes/Picky/Tokenizer.html#method-i-empty_tokens","()","<p>Returns empty tokens.\n"],["encode","Picky::Generators::Similarity::DoubleMetaphone","classes/Picky/Generators/Similarity/DoubleMetaphone.html#method-i-encode","(str_or_sym)","<p>Encodes the given string/symbol.\n<p>Returns a symbol.\n"],["encode","Picky::Generators::Similarity::Metaphone","classes/Picky/Generators/Similarity/Metaphone.html#method-i-encode","(str_or_sym)","<p>Encodes the given string/symbol.\n<p>Returns a symbol.\n"],["encode","Picky::Generators::Similarity::None","classes/Picky/Generators/Similarity/None.html#method-i-encode","(text)","<p>Does not encode text. Just returns nil.\n"],["encode","Picky::Generators::Similarity::Soundex","classes/Picky/Generators/Similarity/Soundex.html#method-i-encode","(str_or_sym)","<p>Encodes the given string/symbol.\n<p>Returns a symbol.\n"],["exclaim","Object","classes/Object.html#method-i-exclaim","(text)","<p>Just puts the given text.\n"],["execute","Picky::Search","classes/Picky/Search.html#method-i-execute","(tokens, ids, offset, original_text = nil, unique = false)","<p>Execute a search using Query::Tokens.\n<p>Note: Internal method, use #search to search.\n"],["execute_rake_task","Picky::Capistrano::All","classes/Picky/Capistrano/All.html#method-i-execute_rake_task","(name, options = {})","<p>Executes a rake task on the server.\n<p>Options:\n\n<pre>* env: The PICKY_ENV. Will not set if set explicitly to false. ...</pre>\n"],["expand_combinations_from","Picky::Query::Indexes","classes/Picky/Query/Indexes.html#method-i-expand_combinations_from","(possible_combinations)","<p>This is the core of the search engine. No kidding.\n<p>Gets an array of [\n\n<pre>[&lt;combinations for token1&gt;],\n[&lt;combinations ...</pre>\n"],["extend_each_of","Picky::Results::ExactFirst","classes/Picky/Results/ExactFirst.html#method-c-extend_each_of","(categories)",""],["extended","Picky::Capistrano::All","classes/Picky/Capistrano/All.html#method-c-extended","(cap_config)",""],["extended","Picky::Capistrano::Caching","classes/Picky/Capistrano/Caching.html#method-c-extended","(cap_config)",""],["extended","Picky::Capistrano::Deploy","classes/Picky/Capistrano/Deploy.html#method-c-extended","(cap_config)",""],["extended","Picky::Capistrano::Overrides","classes/Picky/Capistrano/Overrides.html#method-c-extended","(cap_config)",""],["extended","Picky::Capistrano::Standard","classes/Picky/Capistrano/Standard.html#method-c-extended","(cap_config)",""],["extended","Picky::Capistrano::Statistics","classes/Picky/Capistrano/Statistics.html#method-c-extended","(cap_config)",""],["extended","Picky::Pool","classes/Picky/Pool.html#method-c-extended","(klass)",""],["extended","Picky::Results::ExactFirst","classes/Picky/Results/ExactFirst.html#method-c-extended","(index_or_category)","<p>Installs the exact first on the given category or on the categories of the\nindex, if an index is given. …\n"],["extended","Picky::Sinatra","classes/Picky/Sinatra.html#method-c-extended","(into)","<p>Privatizes app file methods.\n"],["extended","Picky::Sinatra::IndexActions","classes/Picky/Sinatra/IndexActions.html#method-c-extended","(base)",""],["extension","Picky::Backends::File::Basic","classes/Picky/Backends/File/Basic.html#method-i-extension","()","<p>The default extension for index files is “index”.\n"],["extension","Picky::Backends::File::JSON","classes/Picky/Backends/File/JSON.html#method-i-extension","()","<p>Uses the extension “json”.\n"],["extension","Picky::Backends::Memory::Basic","classes/Picky/Backends/Memory/Basic.html#method-i-extension","()","<p>The default extension for index files is “index”.\n"],["extension","Picky::Backends::Memory::JSON","classes/Picky/Backends/Memory/JSON.html#method-i-extension","()","<p>Uses the extension “json”.\n"],["extension","Picky::Backends::Memory::Marshal","classes/Picky/Backends/Memory/Marshal.html#method-i-extension","()","<p>Uses the extension “dump”.\n"],["extension","Picky::Backends::Prepared::Text","classes/Picky/Backends/Prepared/Text.html#method-i-extension","()","<p>Uses the extension “txt”.\n"],["extract_boosts","Picky::API::Search::Boost","classes/Picky/API/Search/Boost.html#method-i-extract_boosts","(thing)",""],["extract_character_substituter","Picky::API::Tokenizer::CharacterSubstituter","classes/Picky/API/Tokenizer/CharacterSubstituter.html#method-i-extract_character_substituter","(thing)",""],["extract_configuration","Picky::Interfaces::LiveParameters::MasterChild","classes/Picky/Interfaces/LiveParameters/MasterChild.html#method-i-extract_configuration","()",""],["extract_host","Picky::Backends::Redis","classes/Picky/Backends/Redis.html#method-c-extract_host","()",""],["extract_partial","Picky::API::Category::Partial","classes/Picky/API/Category/Partial.html#method-i-extract_partial","(thing)",""],["extract_predefined","Picky::Query::Token","classes/Picky/Query/Token.html#method-i-extract_predefined","(mapper)",""],["extract_qualifiers_from","Picky::Category","classes/Picky/Category.html#method-i-extract_qualifiers_from","(options)","<p>Extract qualifiers from the options.\n"],["extract_similarity","Picky::API::Category::Similarity","classes/Picky/API/Category/Similarity.html#method-i-extract_similarity","(thing)",""],["extract_source","Picky::API::Source","classes/Picky/API/Source.html#method-i-extract_source","(thing, options = {})",""],["extract_tokenizer","Picky::API::Tokenizer","classes/Picky/API/Tokenizer.html#method-i-extract_tokenizer","(thing)",""],["extract_weight","Picky::API::Category::Weight","classes/Picky/API/Category/Weight.html#method-i-extract_weight","(thing)",""],["facets","Picky::Index","classes/Picky/Index.html#method-i-facets","(category_identifier, options = {})","<p>Return facets for a category in the form:\n\n<pre class=\"ruby\">{ <span class=\"ruby-identifier\">text</span> =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-identifier\">count</span> }\n</pre>\n<p>Options\n"],["facets","Picky::Search","classes/Picky/Search.html#method-i-facets","(category_identifier, options = {})","<p>Returns a list/hash of filtered facets.\n<p>Params\n\n<pre>category: The category whose facets to return.</pre>\n"],["finish","Picky::Scheduler","classes/Picky/Scheduler.html#method-i-finish","()",""],["flush","Picky::Indexers::Parallel","classes/Picky/Indexers/Parallel.html#method-i-flush","(file, cache)",""],["flush","Picky::Indexers::Serial","classes/Picky/Indexers/Serial.html#method-i-flush","(prepared_file, cache)",""],["flush","Picky::Loggers::Silent","classes/Picky/Loggers/Silent.html#method-i-flush","()","<p>Flush this logger.\n"],["fork?","Picky::Scheduler","classes/Picky/Scheduler.html#method-i-fork-3F","()",""],["from","Picky::Category","classes/Picky/Category.html#method-i-from","()","<p>Where the data is taken from.\n"],["from","Picky::Generators::Partial::Substring","classes/Picky/Generators/Partial/Substring.html#method-i-from","()","<p>Delegator to generator#from.\n"],["from","Picky::Results","classes/Picky/Results.html#method-c-from","(query, amount, offset, allocations, extra_allocations = nil, unique = false)","<p>Create new results and calculate the ids.\n"],["generate_intermediate_result_id","Picky::Backends::Redis","classes/Picky/Backends/Redis.html#method-i-generate_intermediate_result_id","()","<p>Use the host and pid (generated lazily in child processes) for the result.\n"],["geo_categories","Picky::Index","classes/Picky/Index.html#method-i-geo_categories","(lat_name, lng_name, radius, options = {})","<p>HIGHLY EXPERIMENTAL Not correctly working yet. Try it if you feel “beta”.\n<p>Also a range search …\n"],["harakiri","Picky::Interfaces::LiveParameters::MasterChild","classes/Picky/Interfaces/LiveParameters/MasterChild.html#method-i-harakiri","()","<p>Kills itself, but still answering the request honorably.\n"],["harakiri","Rack::Harakiri","classes/Rack/Harakiri.html#method-i-harakiri","()","<p>Checks to see if it is time to honorably retire.\n<p>If yes, kills itself (Unicorn will answer the request, …\n"],["harakiri?","Rack::Harakiri","classes/Rack/Harakiri.html#method-i-harakiri-3F","()","<p>Is it time to honorably retire?\n"],["host","Picky::Backends::Redis","classes/Picky/Backends/Redis.html#method-i-host","()",""],["identifier","Picky::Bundle","classes/Picky/Bundle.html#method-i-identifier","()",""],["identifier","Picky::Category","classes/Picky/Category.html#method-i-identifier","()","<p>Identifier for technical output.\n"],["identifier","Picky::Index","classes/Picky/Index.html#method-i-identifier","()","<p>Identifier used for technical output.\n"],["identifier","Picky::Indexes","classes/Picky/Indexes.html#method-c-identifier","()",""],["identifier","Picky::Query::Combination","classes/Picky/Query/Combination.html#method-i-identifier","()","<p>The identifier for this combination.\n"],["identifier","Picky::Query::Token","classes/Picky/Query/Token.html#method-i-identifier","()","<p>Internal identifier.\n<p>Note: Used in many backends.\n"],["ids","Picky::Analytics","classes/Picky/Analytics.html#method-i-ids","()",""],["ids","Picky::Backends::Backend","classes/Picky/Backends/Backend.html#method-i-ids","(combinations, _, _)","<p>Returns the result ids for the allocation.\n<p>Sorts the ids by size and &amp; through them in the following …\n"],["ids","Picky::Backends::Redis","classes/Picky/Backends/Redis.html#method-c-ids","(combinations, amount, offset)",""],["ids","Picky::Backends::Redis","classes/Picky/Backends/Redis.html#method-i-ids","(combinations, amount, offset)","<p>Returns the result ids for the allocation.\n<p>Developers wanting to program fast intersection routines, can …\n"],["ids","Picky::Bundle","classes/Picky/Bundle.html#method-i-ids","(sym_or_string)","<p>Get the ids for the given symbol.\n<p>Returns a (potentially empty) array of ids.\n<p>Note: If the backend wants …\n"],["ids","Picky::Category","classes/Picky/Category.html#method-i-ids","(token)","<p>Gets the ids for this token’s text.\n"],["ids","Picky::Query::Allocation","classes/Picky/Query/Allocation.html#method-i-ids","()","<p>Ids return by default [].\n"],["ids","Picky::Query::Allocations","classes/Picky/Query/Allocations.html#method-i-ids","(amount = 20)","<p>Returns the top amount ids.\n"],["ids","Picky::Query::Combination","classes/Picky/Query/Combination.html#method-i-ids","()","<p>Returns an array of ids for the given text.\n<p>Note: Caching is most of the time useful.\n"],["ids","Picky::Results","classes/Picky/Results.html#method-i-ids","(only = amount)","<p>Delegates to allocations.\n<p>Note that this is an expensive call and should not be done repeatedly. Just\n…\n"],["ids","Picky::Results::ExactFirst","classes/Picky/Results/ExactFirst.html#method-i-ids","(token)","<p>Overrides the original method.\n"],["ids","Picky::Wrappers::Bundle::Calculation","classes/Picky/Wrappers/Bundle/Calculation.html#method-i-ids","(float_str)","<p>SYMBOLS. Use a block here?\n<p>THINK Move the calculation elsewhere?\n"],["ignore","Picky::Query::Indexes","classes/Picky/Query/Indexes.html#method-i-ignore","(*qualifiers)","<p>Ignore the categories with these qualifiers.\n<p>Example:\n\n<pre>search = Search.new(index1, index2, index3) do\n  ...</pre>\n"],["ignore_unassigned_tokens","Picky::Search","classes/Picky/Search.html#method-i-ignore_unassigned_tokens","(value = true)","<p>Ignore the given token if it cannot be matched to a category. The default\nbehaviour is that if a token …\n"],["indented_to_s","Object","classes/Object.html#method-i-indented_to_s","(amount = 2)","<p>Indents each line by <code>amount=2</code> spaces.\n"],["index","Picky::Categories","classes/Picky/Categories.html#method-i-index","(scheduler = Scheduler.new)","<p>First prepares all categories, then caches all categories.\n"],["index","Picky::Category","classes/Picky/Category.html#method-i-index","(scheduler = Scheduler.new)","<p>Prepares and caches this category.\n<p>This one should be used by users.\n"],["index","Picky::Index","classes/Picky/Index.html#method-i-index","(scheduler = Scheduler.new)",""],["index","Picky::Indexes","classes/Picky/Indexes.html#method-i-index","(scheduler = Scheduler.new)",""],["index","Picky::Indexes","classes/Picky/Indexes.html#method-c-index","(scheduler = Scheduler.new)",""],["index","Picky::Wrappers::Bundle::ExactPartial","classes/Picky/Wrappers/Bundle/ExactPartial.html#method-i-index","()",""],["index_analysis","Analyzer","classes/Analyzer.html#method-i-index_analysis","()",""],["index_directory","Picky::Category","classes/Picky/Category.html#method-i-index_directory","()","<p>The index directory for this category.\n"],["index_flush","Picky::Indexers::Parallel","classes/Picky/Indexers/Parallel.html#method-i-index_flush","(objects, file, category, cache, tokenizer)",""],["index_flush","Picky::Indexers::Serial","classes/Picky/Indexers/Serial.html#method-i-index_flush","(datas, file, cache, tokenizer)",""],["index_name","Picky::Category","classes/Picky/Category.html#method-i-index_name","()","<p>Index name.\n"],["index_path","Picky::Bundle","classes/Picky/Bundle.html#method-i-index_path","(type = nil)","<p>Path and partial filename of a specific subindex.\n<p>Subindexes are:\n\n<pre>* inverted index\n* weights index\n* partial ...</pre>\n"],["index_to_s","Analyzer","classes/Analyzer.html#method-i-index_to_s","()",""],["indexer","Picky::Category","classes/Picky/Category.html#method-i-indexer","()","<p>The indexer is lazily generated and cached.\n"],["indexing","Picky::Index","classes/Picky/Index.html#method-i-indexing","(options = {})","<p>Define an index tokenizer on the index.\n<p>Parameters are the exact same as for indexing.\n"],["indexing","Picky::Sinatra","classes/Picky/Sinatra.html#method-i-indexing","(options = {})","<p>Sets tokenizer default indexing options.\n"],["indexing","Picky::Tokenizer","classes/Picky/Tokenizer.html#method-c-indexing","()",""],["info","Picky::Loggers::Concise","classes/Picky/Loggers/Concise.html#method-i-info","(text)",""],["info","Picky::Loggers::Silent","classes/Picky/Loggers/Silent.html#method-i-info","(*)",""],["info","Picky::Loggers::Verbose","classes/Picky/Loggers/Verbose.html#method-i-info","(text)",""],["initial","Picky::Backends::File::Basic","classes/Picky/Backends/File/Basic.html#method-i-initial","()","<p>The initial content before loading.\n<p>Note: We could also load the mapping file\n\n<pre>as in #load.</pre>\n"],["initial","Picky::Backends::Memory::Basic","classes/Picky/Backends/Memory/Basic.html#method-i-initial","()","<p>The initial content before loading from file.\n"],["initial","Picky::Backends::Prepared::Text","classes/Picky/Backends/Prepared/Text.html#method-i-initial","()","<p>The initial content before loading.\n"],["initial","Picky::Backends::Redis::Basic","classes/Picky/Backends/Redis/Basic.html#method-i-initial","()","<p>The initial content before loading.\n<p>Note: As Redis indexes needn’t be loaded per se,\n\n<pre>this just returns ...</pre>\n"],["initial","Picky::Backends::SQLite::Basic","classes/Picky/Backends/SQLite/Basic.html#method-i-initial","()",""],["initialize_backends","Picky::Bundle","classes/Picky/Bundle.html#method-i-initialize_backends","()","<p>Initial indexes.\n<p>Note that if the weights strategy doesn’t need to be saved, the strategy\nitself pretends …\n"],["inject_possible_for","Picky::Categories","classes/Picky/Categories.html#method-i-inject_possible_for","(tokens)",""],["install","Picky::Pool","classes/Picky/Pool.html#method-c-install","()","<p>Installs itself on a few internal classes.\n<p>Note: If you need to run two consecutive queries, this can’t …\n"],["install_on","Picky::Category::Location","classes/Picky/Category/Location.html#method-c-install_on","(category, grid, precision, anchor)",""],["instance","Picky::Indexes","classes/Picky/Indexes.html#method-c-instance","()","<p>Return the Indexes instance.\n"],["instance_delegate","Class","classes/Class.html#method-i-instance_delegate","(*methods)",""],["key_format","Picky::Bundle","classes/Picky/Bundle.html#method-i-key_format","()","<p>If a key format is set, use it, else delegate to the category.\n"],["key_format","Picky::Category","classes/Picky/Category.html#method-i-key_format","()","<p>Return the key format.\n<p>If no key_format is defined on the category and the source has no key\nformat, ask …\n"],["key_format","Picky::Index","classes/Picky/Index.html#method-i-key_format","(key_format = nil)","<p>Define a key_format on the index.\n<p>Parameter is a method name to use on the key (e.g. :to_i, :to_s, :strip). …\n"],["kill_each_worker_except","Picky::Interfaces::LiveParameters::MasterChild","classes/Picky/Interfaces/LiveParameters/MasterChild.html#method-i-kill_each_worker_except","(pid)","<p>Taken from Unicorn.\n"],["kill_worker","Picky::Interfaces::LiveParameters::MasterChild","classes/Picky/Interfaces/LiveParameters/MasterChild.html#method-i-kill_worker","(signal, wpid)",""],["lazily_initialize_client","Picky::Backends::SQLite::Basic","classes/Picky/Backends/SQLite/Basic.html#method-i-lazily_initialize_client","()",""],["lines_of_code","Picky::Statistics","classes/Picky/Statistics.html#method-i-lines_of_code","(text)","<p>Internal methods.\n"],["load","Picky::Backends::File::JSON","classes/Picky/Backends/File/JSON.html#method-i-load","()","<p>Loads the mapping hash from json format.\n"],["load","Picky::Backends::Memory::JSON","classes/Picky/Backends/Memory/JSON.html#method-i-load","()","<p>Loads the index hash from json format.\n"],["load","Picky::Backends::Memory::Marshal","classes/Picky/Backends/Memory/Marshal.html#method-i-load","()","<p>Loads the index hash from marshal format.\n"],["load","Picky::Backends::Prepared::Text","classes/Picky/Backends/Prepared/Text.html#method-i-load","()","<p>Text files are used exclusively for prepared data files.\n"],["load","Picky::Backends::Redis::Basic","classes/Picky/Backends/Redis/Basic.html#method-i-load","()","<p>Returns itself.\n"],["load","Picky::Backends::SQLite::Basic","classes/Picky/Backends/SQLite/Basic.html#method-i-load","()",""],["load","Picky::Bundle","classes/Picky/Bundle.html#method-i-load","()","<p>Loads all indexes.\n<p>Loading loads index objects from the backend. They should each respond to\n[] and return …\n"],["load","Picky::Category","classes/Picky/Category.html#method-i-load","()","<p>Loads the index from cache.\n"],["load","Picky::Loader","classes/Picky/Loader.html#method-c-load","(app_file = 'app')",""],["load","Picky::Loggers::Concise","classes/Picky/Loggers/Concise.html#method-i-load","(*)",""],["load","Picky::Loggers::Silent","classes/Picky/Loggers/Silent.html#method-i-load","(*)",""],["load","Picky::Loggers::Verbose","classes/Picky/Loggers/Verbose.html#method-i-load","(category)",""],["load","Picky::Wrappers::Bundle::ExactPartial","classes/Picky/Wrappers/Bundle/ExactPartial.html#method-i-load","()",""],["load","Picky::Wrappers::Bundle::Location","classes/Picky/Wrappers/Bundle/Location.html#method-i-load","()","<p>Load first the bundle, then extract the config.\n"],["load_application","Picky::Loader","classes/Picky/Loader.html#method-c-load_application","(file = 'app')","<p>Load the user’s application.\n"],["load_configuration","Picky::Bundle","classes/Picky/Bundle.html#method-i-load_configuration","()","<p>Loads the configuration.\n"],["load_framework","Picky::Loader","classes/Picky/Loader.html#method-c-load_framework","()","<p>Loads the framework.\n"],["load_framework_internals","Picky::Loader","classes/Picky/Loader.html#method-c-load_framework_internals","()","<p>Loads the internal parts of the framework. (Not for the user)\n"],["load_inverted","Picky::Bundle","classes/Picky/Bundle.html#method-i-load_inverted","()","<p>Loads the core index.\n"],["load_realtime","Picky::Bundle","classes/Picky/Bundle.html#method-i-load_realtime","()","<p>Loads the realtime mapping.\n"],["load_relative","Picky::Loader","classes/Picky/Loader.html#method-c-load_relative","(filename_without_rb)","<p>Load a file relative to this.\n"],["load_self","Picky::Loader","classes/Picky/Loader.html#method-c-load_self","()","<p>Loads this file anew.\n"],["load_similarity","Picky::Bundle","classes/Picky/Bundle.html#method-i-load_similarity","()","<p>Loads the similarity index.\n"],["load_user","Picky::Loader","classes/Picky/Loader.html#method-c-load_user","(filename)","<p>Load a user file.\n"],["load_user_interface","Picky::Loader","classes/Picky/Loader.html#method-c-load_user_interface","()","<p>Loads the user interface parts.\n"],["load_weights","Picky::Bundle","classes/Picky/Bundle.html#method-i-load_weights","()","<p>Loads the weights index.\n"],["log_type","Picky::Results","classes/Picky/Results.html#method-i-log_type","()","<p>The first character in the blog designates what type of query it is.\n<p>No calculated ids means: No results. …\n"],["make","Picky::Backends::Redis::DirectlyManipulable","classes/Picky/Backends/Redis/DirectlyManipulable.html#method-c-make","(backend, list, key)",""],["make","Picky::Backends::SQLite::DirectlyManipulable","classes/Picky/Backends/SQLite/DirectlyManipulable.html#method-c-make","(backend, array, key)",""],["map","Picky::Query::QualifierCategoryMapper","classes/Picky/Query/QualifierCategoryMapper.html#method-i-map","(qualifier)","<p>Normalizes the given qualifier.\n<p>Returns nil if it is not allowed, the normalized qualifier if it is.\n"],["mapping","Picky::Backends::File::JSON","classes/Picky/Backends/File/JSON.html#method-i-mapping","()","<p>The in-memory mapping hash, mapping a Symbol key to [length, offset] of the\nJSON data in the file.\n"],["max_allocations","Picky::Search","classes/Picky/Search.html#method-i-max_allocations","(amount = nil)","<p>Sets the max amount of allocations to calculate.\n<p>Examples:\n\n<pre>search = Search.new(index1, index2, index3) ...</pre>\n"],["max_words","Picky::Tokenizer","classes/Picky/Tokenizer.html#method-i-max_words","(amount)","<p>The maximum amount of words to pass into the search engine.\n"],["maybe_load_hiredis","Picky::Backends::Redis","classes/Picky/Backends/Redis.html#method-i-maybe_load_hiredis","()",""],["memory_efficient_intersect","Performant::Array","classes/Performant/Array.html#method-c-memory_efficient_intersect","(p1)",""],["metaphone","String","classes/String.html#method-i-metaphone","()","<p>Returns a metaphone code for this string.\n"],["metaphone","Symbol","classes/Symbol.html#method-i-metaphone","()","<p>Returns a metaphone code for this symbol.\n"],["new","Analyzer","classes/Analyzer.html#method-c-new","()",""],["new","Picky::Analytics","classes/Picky/Analytics.html#method-c-new","(*indexes)",""],["new","Picky::Backends::File::Basic","classes/Picky/Backends/File/Basic.html#method-c-new","(cache_path, options = {})","<p>An index cache takes a path, without file extension, which will be provided\nby the subclasses.\n"],["new","Picky::Backends::Memory::Basic","classes/Picky/Backends/Memory/Basic.html#method-c-new","(cache_path, options = {})","<p>An index cache takes a path, without file extension, which will be provided\nby the subclasses.\n"],["new","Picky::Backends::Prepared::Text","classes/Picky/Backends/Prepared/Text.html#method-c-new","(cache_path, options = {})",""],["new","Picky::Backends::Redis","classes/Picky/Backends/Redis.html#method-c-new","(options = {})",""],["new","Picky::Backends::Redis::Basic","classes/Picky/Backends/Redis/Basic.html#method-c-new","(client, namespace, options = {})","<p>An index cache takes a path, without file extension, which will be provided\nby the subclasses.\n"],["new","Picky::Backends::SQLite","classes/Picky/Backends/SQLite.html#method-c-new","(options = {})",""],["new","Picky::Backends::SQLite::Basic","classes/Picky/Backends/SQLite/Basic.html#method-c-new","(cache_path, options = {})",""],["new","Picky::Bundle","classes/Picky/Bundle.html#method-c-new","(name, category, weight_strategy, partial_strategy, similarity_strategy, options = {})",""],["new","Picky::Calculations::Location","classes/Picky/Calculations/Location.html#method-c-new","(user_grid, anchor = 0.0, precision = nil)",""],["new","Picky::Categories","classes/Picky/Categories.html#method-c-new","(options = {})","<p>A list of indexed categories.\n"],["new","Picky::Category","classes/Picky/Category.html#method-c-new","(name, index, options = {})","<p>Parameters:\n\n<pre>* name: Category name to use as identifier and file names.\n* index: Index to which this category ...</pre>\n"],["new","Picky::CharacterSubstituters::WestEuropean","classes/Picky/CharacterSubstituters/WestEuropean.html#method-c-new","()",""],["new","Picky::Generators::Partial::Infix","classes/Picky/Generators/Partial/Infix.html#method-c-new","(options = {})","<p>The min option signifies with what size it will start in generating the\ninfix tokens.\n<p>Examples:\n<p>With :hello, …\n"],["new","Picky::Generators::Partial::Postfix","classes/Picky/Generators/Partial/Postfix.html#method-c-new","(options = {})","<p>The from option signifies where in the symbol it will start in generating\nthe subtokens.\n<p>Examples:\n<p>With …\n"],["new","Picky::Generators::Partial::Substring","classes/Picky/Generators/Partial/Substring.html#method-c-new","(options = {})","<p>The from option signifies where in the symbol it will start in generating\nthe subtokens.\n<p>Examples:\n<p>With …\n"],["new","Picky::Generators::Partial::SubstringGenerator","classes/Picky/Generators/Partial/SubstringGenerator.html#method-c-new","(from, to)",""],["new","Picky::Generators::Similarity::Phonetic","classes/Picky/Generators/Similarity/Phonetic.html#method-c-new","(amount = 3)",""],["new","Picky::Generators::Weights::Constant","classes/Picky/Generators/Weights/Constant.html#method-c-new","(weight = 0.0)",""],["new","Picky::Generators::Weights::Dynamic","classes/Picky/Generators/Weights/Dynamic.html#method-c-new","(&calculation)","<p>Give it a block that takes a string/symbol and returns a weight.\n"],["new","Picky::Generators::Weights::Logarithmic","classes/Picky/Generators/Weights/Logarithmic.html#method-c-new","(constant = 0.0)",""],["new","Picky::Index","classes/Picky/Index.html#method-c-new","(name)","<p>Create a new index with a given source.\n<p>Parameters\n<p>name: A name that will be used for the index directory …\n"],["new","Picky::Indexers::Base","classes/Picky/Indexers/Base.html#method-c-new","(index_or_category)",""],["new","Picky::Indexes","classes/Picky/Indexes.html#method-c-new","(*indexes)",""],["new","Picky::Indexes::Memory","classes/Picky/Indexes/Memory.html#method-c-new","(*)",""],["new","Picky::Indexes::Redis","classes/Picky/Indexes/Redis.html#method-c-new","(*)",""],["new","Picky::Interfaces::LiveParameters::MasterChild","classes/Picky/Interfaces/LiveParameters/MasterChild.html#method-c-new","()",""],["new","Picky::Interfaces::LiveParameters::MasterChild::CouldNotUpdateConfigurationError","classes/Picky/Interfaces/LiveParameters/MasterChild/CouldNotUpdateConfigurationError.html#method-c-new","(config_key, message)",""],["new","Picky::Loggers::Concise","classes/Picky/Loggers/Concise.html#method-c-new","(*args)",""],["new","Picky::Loggers::Silent","classes/Picky/Loggers/Silent.html#method-c-new","(io = STDOUT)",""],["new","Picky::Query::Allocation","classes/Picky/Query/Allocation.html#method-c-new","(index, combinations)",""],["new","Picky::Query::Allocations","classes/Picky/Query/Allocations.html#method-c-new","(allocations = [])",""],["new","Picky::Query::Boosts","classes/Picky/Query/Boosts.html#method-c-new","(boosts = {})","<p>Needs a Hash of\n\n<pre class=\"ruby\">[:<span class=\"ruby-identifier\">category_name1</span>, :<span class=\"ruby-identifier\">category_name2</span>] =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-value\">+3</span>\n</pre>\n<p>(some positive or negative weight)\n"],["new","Picky::Query::Combination","classes/Picky/Query/Combination.html#method-c-new","(token, category)",""],["new","Picky::Query::Combinations","classes/Picky/Query/Combinations.html#method-c-new","(combinations = [])",""],["new","Picky::Query::DifferentBackendsError","classes/Picky/Query/DifferentBackendsError.html#method-c-new","(backends)",""],["new","Picky::Query::Indexes","classes/Picky/Query/Indexes.html#method-c-new","(*indexes)","<p>Creates a new Query::Indexes.\n<p>Its job is to generate all possible combinations. Note: We cannot mix\nmemory …\n"],["new","Picky::Query::QualifierCategoryMapper","classes/Picky/Query/QualifierCategoryMapper.html#method-c-new","(indexes)",""],["new","Picky::Query::Token","classes/Picky/Query/Token.html#method-c-new","(text, original = nil, categories = nil)","<p>Normal initializer.\n<p>Note: Use this if you do not want a normalized token.\n"],["new","Picky::Query::Tokens","classes/Picky/Query/Tokens.html#method-c-new","(tokens, ignore_unassigned = false)","<p>Create a new Tokens object with the array of tokens passed in.\n"],["new","Picky::Results","classes/Picky/Results.html#method-c-new","(query = nil, amount = 0, offset = 0, allocations = Query::Allocations.new)","<p>Takes instances of Query::Allocations as param.\n"],["new","Picky::Scheduler","classes/Picky/Scheduler.html#method-c-new","(options = {})",""],["new","Picky::Search","classes/Picky/Search.html#method-c-new","(*indexes)","<p>Takes:\n<p>A number of indexes\n\n<p>It is also possible to define the tokenizer and boosts like so. Example:\n"],["new","Picky::Statistics","classes/Picky/Statistics.html#method-c-new","()",""],["new","Picky::Tokenizer","classes/Picky/Tokenizer.html#method-c-new","(options = {})",""],["new","Picky::Try","classes/Picky/Try.html#method-c-new","(text, index = nil, category = nil)",""],["new","Picky::Wrappers::Bundle::Location","classes/Picky/Wrappers/Bundle/Location.html#method-c-new","(bundle, user_grid, options = {})",""],["new","Picky::Wrappers::Bundle::Wrapper","classes/Picky/Wrappers/Bundle/Wrapper.html#method-c-new","(bundle)",""],["new","Rack::Harakiri","classes/Rack/Harakiri.html#method-c-new","(app)",""],["no_partial_character=","Picky::Query::Token","classes/Picky/Query/Token.html#method-c-no_partial_character-3D","(character)","<p>Define a character which stops a token from being a partial token, even if\nit is the last token.\n<p>Default …\n"],["no_similar_character=","Picky::Query::Token","classes/Picky/Query/Token.html#method-c-no_similar_character-3D","(character)","<p>Define a character which stops a token from being a similar token, even if\nit is the last token.\n<p>Default …\n"],["normalize_with_patterns","Picky::Tokenizer","classes/Picky/Tokenizer.html#method-i-normalize_with_patterns","(text)",""],["normalize_with_patterns?","Picky::Tokenizer","classes/Picky/Tokenizer.html#method-i-normalize_with_patterns-3F","()",""],["normalizes_words","Picky::Tokenizer","classes/Picky/Tokenizer.html#method-i-normalizes_words","(regexp_replaces)","<p>Normalizing.\n<p>We only allow arrays.\n"],["notify_finished","Picky::Indexers::Base","classes/Picky/Indexers/Base.html#method-i-notify_finished","(prepared_file)",""],["only","Picky::Query::Indexes","classes/Picky/Query/Indexes.html#method-i-only","(*qualifiers)","<p>Restrict categories to the given ones.\n<p>Functionally equivalent as if indexes didn’t have the categories …\n"],["open","Picky::Backends::Prepared::Text","classes/Picky/Backends/Prepared/Text.html#method-i-open","(&block)",""],["originals","Picky::Query::Tokens","classes/Picky/Query/Tokens.html#method-i-originals","()",""],["output","Picky::Try","classes/Picky/Try.html#method-i-output","()",""],["parameters","Picky::Interfaces::LiveParameters::MasterChild","classes/Picky/Interfaces/LiveParameters/MasterChild.html#method-i-parameters","(configuration_hash)","<p>Updates any parameters with the ones given and returns the updated params.\n<p>The params are a strictly defined …\n"],["partial=","Picky::Query::Token","classes/Picky/Query/Token.html#method-i-partial-3D","(partial)","<p>Partial is a conditional setter.\n<p>It is only settable if it hasn’t been set yet.\n"],["partial?","Picky::Query::Token","classes/Picky/Query/Token.html#method-i-partial-3F","()","<p>A token is partial? only if it not similar and is partial.\n<p>It can’t be similar and partial at the same …\n"],["partial_character=","Picky::Query::Token","classes/Picky/Query/Token.html#method-c-partial_character-3D","(character)","<p>Define a character which makes a token a partial token.\n<p>Default is ‘*’.\n<p>This is used in a regexp (%r{#{char} …\n"],["partialize","Picky::Query::Token","classes/Picky/Query/Token.html#method-i-partialize","()",""],["partialize_last","Picky::Query::Tokens","classes/Picky/Query/Tokens.html#method-i-partialize_last","()","<p>Makes the last of the tokens partial.\n"],["partialized","Picky::Bundle","classes/Picky/Bundle.html#method-i-partialized","(text, &block)",""],["pid","Picky::Backends::Redis","classes/Picky/Backends/Redis.html#method-i-pid","()",""],["possible_categories","Picky::Categories","classes/Picky/Categories.html#method-i-possible_categories","(token)","<p>This returns the possible categories for this token. If the user has\nalready preselected a category for …\n"],["possible_combinations","Picky::Categories","classes/Picky/Categories.html#method-i-possible_combinations","(token)","<p>Return all possible combinations for the given token.\n<p>This checks if it needs to also search through similar …\n"],["possible_combinations_in","Picky::Query::Token","classes/Picky/Query/Token.html#method-i-possible_combinations_in","(index)","<p>Returns an array of possible combinations.\n"],["possible_combinations_in","Picky::Query::Tokens","classes/Picky/Query/Tokens.html#method-i-possible_combinations_in","(index)","<p>Generates an array in the form of [\n\n<pre>[combination],                           # of token 1\n[combination, ...</pre>\n"],["possible_for","Picky::Categories","classes/Picky/Categories.html#method-i-possible_for","(token, preselected_categories = nil)","<p>Returns possible Combinations for the token.\n<p>Note: The preselected_categories param is an optimization. …\n"],["preamble","Picky::Statistics","classes/Picky/Statistics.html#method-i-preamble","()",""],["prepare","Picky::Category","classes/Picky/Category.html#method-i-prepare","(scheduler = Scheduler.new)","<p>Indexes, creates the “prepared_…” file.\n"],["prepare","Picky::Index","classes/Picky/Index.html#method-i-prepare","(scheduler = Scheduler.new)","<p>Calling prepare on an index will call prepare on every category.\n<p>Decides whether to use a parallel indexer …\n"],["prepare","Picky::Indexers::Base","classes/Picky/Indexers/Base.html#method-i-prepare","(categories, scheduler = Scheduler.new)","<p>Starts the indexing process.\n"],["prepare!","Picky::Results","classes/Picky/Results.html#method-i-prepare-21","(extra_allocations = nil, unique = false)","<p>This starts the actual processing.\n<p>Without this, the allocations are not processed, and no ids are calculated.\n…\n"],["prepare_in_parallel","Picky::Index","classes/Picky/Index.html#method-i-prepare_in_parallel","(scheduler)","<p>Indexes the categories in parallel.\n<p>Only use where the category does have a #each source defined.\n"],["prepared_allocations_for","Picky::Query::Indexes","classes/Picky/Query/Indexes.html#method-i-prepared_allocations_for","(tokens, weights = {})","<p>Returns a number of prepared (sorted, reduced etc.) allocations for the\ngiven tokens.\n"],["prepared_index_file","Picky::Category","classes/Picky/Category.html#method-i-prepared_index_file","(&block)","<p>Get an opened index file.\n<p>Note: If you don’t use it with the block, do not forget to close it.\n"],["prepared_index_path","Picky::Category","classes/Picky/Category.html#method-i-prepared_index_path","()","<p>Path and partial filename of the prepared index on this category.\n"],["preprocess","Picky::Tokenizer","classes/Picky/Tokenizer.html#method-i-preprocess","(text)","<p>Default preprocessing hook.\n<p>Does:\n<p>Character substitution.\n"],["pretokenize","Picky::Tokenizer","classes/Picky/Tokenizer.html#method-i-pretokenize","(text)","<p>Pretokenizing.\n<p>Does:\n\n<pre>* Split the text into words.\n* Cap the amount of tokens if max_words is set.</pre>\n"],["prioritize","Picky::Generators::Similarity::Phonetic","classes/Picky/Generators/Similarity/Phonetic.html#method-i-prioritize","(ary, code)","<p>Sorts the index values in place.\n"],["process","Picky::Indexers::Parallel","classes/Picky/Indexers/Parallel.html#method-i-process","(source_for_prepare, categories, scheduler = Scheduler.new)","<p>Process does the actual indexing.\n<p>Parameters:\n\n<pre>* categories: An Enumerable of Category-s.</pre>\n"],["process","Picky::Indexers::Serial","classes/Picky/Indexers/Serial.html#method-i-process","(source_for_prepare, categories, scheduler = Scheduler.new)","<p>Harvest the data from the source, tokenize, and write to an intermediate\n“prepared index” file. …\n"],["process","Picky::Query::Token","classes/Picky/Query/Token.html#method-i-process","()",""],["process!","Picky::Query::Allocation","classes/Picky/Query/Allocation.html#method-i-process-21","(amount, offset)","<p>This starts the searching process.\n<p>Returns the calculated ids (from the offset).\n<p>Parameters:\n"],["process!","Picky::Query::Allocations","classes/Picky/Query/Allocations.html#method-i-process-21","(amount, offset = 0, terminate_early = nil)","<p>This is the main method of this class that will replace ids and count.\n<p>What it does is calculate the ids …\n"],["process_unique!","Picky::Query::Allocations","classes/Picky/Query/Allocations.html#method-i-process_unique-21","(amount, offset = 0, terminate_early = nil)","<p>Same as #process! but removes duplicate ids from results.\n<p>Note that in the result later on an allocation …\n"],["process_with_illegals!","Picky::Query::Allocation","classes/Picky/Query/Allocation.html#method-i-process_with_illegals-21","(amount, offset, illegal_ids)","<p>Same as the above, but with illegal ids. Parameter added:\n\n<pre>* illegal_ids: ids to ignore.</pre>\n"],["processed","Picky::Query::Token","classes/Picky/Query/Token.html#method-c-processed","(text, original = nil)","<p>Returns a qualified and normalized token.\n<p>Note: Use this in the search engine if you need a qualified …\n"],["processed","Picky::Query::Tokens","classes/Picky/Query/Tokens.html#method-c-processed","(words, originals, ignore_unassigned = false)","<p>Creates a new Tokens object from a number of Strings.\n"],["progress","Picky::Loggers::Concise","classes/Picky/Loggers/Concise.html#method-i-progress","(type = '.')",""],["qualifier_text_delimiter=","Picky::Query::Token","classes/Picky/Query/Token.html#method-c-qualifier_text_delimiter-3D","(character)","<p>Define a character which separates the qualifier from the search text.\n<p>Default is ‘:’.\n<p>This is used in …\n"],["qualifiers","Picky::Category","classes/Picky/Category.html#method-i-qualifiers","()","<p>Returns the qualifiers if set or just the name if not.\n"],["qualifiers","Picky::Query::Token","classes/Picky/Query/Token.html#method-i-qualifiers","()","<p>Returns the qualifiers as an array.\n<p>Example:\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">token</span>.<span class=\"ruby-identifier\">qualifiers</span> <span class=\"ruby-comment\"># =&gt; ['title', 'author']</span>\n<span class=\"ruby-identifier\">token</span>.<span class=\"ruby-identifier\">qualifiers</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["qualifiers_delimiter=","Picky::Query::Token","classes/Picky/Query/Token.html#method-c-qualifiers_delimiter-3D","(character)","<p>Define a character which separates the qualifiers (before the search text).\n<p>Default is ‘,’.\n<p>This is used …\n"],["qualify","Picky::Query::Token","classes/Picky/Query/Token.html#method-i-qualify","()",""],["querying_removes_characters","Picky::Interfaces::LiveParameters::MasterChild","classes/Picky/Interfaces/LiveParameters/MasterChild.html#method-i-querying_removes_characters","()","<p>THINK What to do about this? Standardize the tokenizer interface, then\naccess each individual tokenizer. …\n"],["querying_removes_characters=","Picky::Interfaces::LiveParameters::MasterChild","classes/Picky/Interfaces/LiveParameters/MasterChild.html#method-i-querying_removes_characters-3D","(new_value)",""],["querying_splits_text_on","Picky::Interfaces::LiveParameters::MasterChild","classes/Picky/Interfaces/LiveParameters/MasterChild.html#method-i-querying_splits_text_on","()",""],["querying_splits_text_on=","Picky::Interfaces::LiveParameters::MasterChild","classes/Picky/Interfaces/LiveParameters/MasterChild.html#method-i-querying_splits_text_on-3D","(new_value)",""],["querying_stopwords","Picky::Interfaces::LiveParameters::MasterChild","classes/Picky/Interfaces/LiveParameters/MasterChild.html#method-i-querying_stopwords","()",""],["querying_stopwords=","Picky::Interfaces::LiveParameters::MasterChild","classes/Picky/Interfaces/LiveParameters/MasterChild.html#method-i-querying_stopwords-3D","(new_value)",""],["raise_different","Picky::Query::IndexesCheck","classes/Picky/Query/IndexesCheck.html#method-c-raise_different","(backends)",""],["raise_not_found","Picky::Categories","classes/Picky/Categories.html#method-i-raise_not_found","(category_name)",""],["raise_not_found","Picky::Indexes","classes/Picky/Indexes.html#method-i-raise_not_found","(index_name)","<p>Raises a not found for the index.\n"],["range","Picky::Calculations::Location","classes/Picky/Calculations/Location.html#method-i-range","(around_location)",""],["ranged_category","Picky::Index","classes/Picky/Index.html#method-i-ranged_category","(category_name, range, options = {})","<p>Make this category range searchable with a fixed range. If you need other\nranges, define another category …\n"],["redefine_illegals","Picky::Query::Token","classes/Picky/Query/Token.html#method-c-redefine_illegals","()",""],["redis_version","Picky::Backends::Redis","classes/Picky/Backends/Redis.html#method-i-redis_version","()","<p>Returns an array describing the current Redis version.\n<p>Note: This method assumes that clients answer\n\n<pre>to ...</pre>\n"],["redis_with_scripting?","Picky::Backends::Redis","classes/Picky/Backends/Redis.html#method-i-redis_with_scripting-3F","()","<p>Does the Redis version already include scripting support?\n"],["reduce_to","Picky::Query::Allocations","classes/Picky/Query/Allocations.html#method-i-reduce_to","(amount)","<p>Reduces the amount of allocations to x.\n"],["register","Picky::Indexes","classes/Picky/Indexes.html#method-i-register","(index)","<p>Registers an index with the indexes.\n"],["register","Picky::Indexes","classes/Picky/Indexes.html#method-c-register","(index)",""],["reindex","Picky::Category","classes/Picky/Category.html#method-i-reindex","()","<p>Indexes and loads the category.\n"],["reject","Picky::Tokenizer","classes/Picky/Tokenizer.html#method-i-reject","(tokens)",""],["rejects_token_if","Picky::Tokenizer","classes/Picky/Tokenizer.html#method-i-rejects_token_if","(&condition)","<p>Reject tokens after tokenizing based on the given criteria.\n"],["release_all","Picky::Pool","classes/Picky/Pool.html#method-c-release_all","()","<p>Releases all obtained objects.\n"],["reload","Picky::Loader","classes/Picky/Loader.html#method-c-reload","(app_file = 'app')","<p>Reloads the whole app. First itself, then the app.\n"],["remove","Picky::Bundle","classes/Picky/Bundle.html#method-i-remove","(id)","<p>Removes the given id from the indexes.\n"],["remove","Picky::Category","classes/Picky/Category.html#method-i-remove","(id)","<p>Removes an indexed object with the given id.\n"],["remove","Picky::Query::Allocation","classes/Picky/Query/Allocation.html#method-i-remove","(categories = [])",""],["remove","Picky::Query::Allocations","classes/Picky/Query/Allocations.html#method-i-remove","(categories = [])","<p>Removes combinations.\n<p>Only those passed in are removed.\n"],["remove","Picky::Query::Combinations","classes/Picky/Query/Combinations.html#method-i-remove","(categories = [])","<p>Filters the tokens and categories such that categories that are passed in,\nare removed.\n<p>Note: This method …\n"],["remove_illegals","Picky::Query::Token","classes/Picky/Query/Token.html#method-i-remove_illegals","()","<p>Normalizes this token’s text.\n"],["remove_illegals","Picky::Tokenizer","classes/Picky/Tokenizer.html#method-i-remove_illegals","(text)",""],["remove_non_single_stopwords","Picky::Tokenizer","classes/Picky/Tokenizer.html#method-i-remove_non_single_stopwords","(text)",""],["remove_stopwords","Picky::Tokenizer","classes/Picky/Tokenizer.html#method-i-remove_stopwords","(text)",""],["remove_worker","Picky::Interfaces::LiveParameters::Unicorn","classes/Picky/Interfaces/LiveParameters/Unicorn.html#method-i-remove_worker","(wpid)",""],["removes_characters","Picky::Tokenizer","classes/Picky/Tokenizer.html#method-i-removes_characters","(regexp)","<p>Illegals.\n<p>We only allow regexps (even if string would be okay too for gsub! - it’s\ntoo hard to understand) …\n"],["replace","Picky::Category","classes/Picky/Category.html#method-i-replace","(object, where = :unshift)","<p>Removes the object’s id, and then adds it again.\n"],["replace_from","Picky::Category","classes/Picky/Category.html#method-i-replace_from","(hash)","<p>Replaces just part of the indexed data.\n<p>Note: Takes a hash as opposed to the add/replace method.\n"],["require_relative","Kernel","classes/Kernel.html#method-i-require_relative","(relative_feature)",""],["reset","Picky::Backends::Redis::Basic","classes/Picky/Backends/Redis/Basic.html#method-i-reset","()","<p>Clears the whole namespace.\n"],["reset","Picky::Backends::SQLite::Basic","classes/Picky/Backends/SQLite/Basic.html#method-i-reset","()",""],["reset","Picky::Indexers::Base","classes/Picky/Indexers/Base.html#method-i-reset","(source)","<p>Explicitly reset the source to avoid caching trouble.\n"],["reset","Picky::Loggers::Concise","classes/Picky/Loggers/Concise.html#method-i-reset","()",""],["reset_backend","Picky::Bundle","classes/Picky/Bundle.html#method-i-reset_backend","()","<p>Initializes all necessary indexes from the backend.\n"],["reset_backend","Picky::Category","classes/Picky/Category.html#method-i-reset_backend","()","<p>Resets backends in both bundles.\n"],["restrict","Picky::Query::QualifierCategoryMapper","classes/Picky/Query/QualifierCategoryMapper.html#method-i-restrict","(user_qualified)","<p>Restricts the given categories.\n"],["restrict_to","Picky::Query::QualifierCategoryMapper","classes/Picky/Query/QualifierCategoryMapper.html#method-i-restrict_to","(*qualifiers)",""],["result_identifier","Picky::Index","classes/Picky/Index.html#method-i-result_identifier","(result_identifier = nil)","<p>Define how the results of this index are identified. (Shown in the client,\nfor example)\n<p>Default is the …\n"],["retrieve","Picky::Backends::File::JSON","classes/Picky/Backends/File/JSON.html#method-i-retrieve","()","<p>A json file does not provide retrieve functionality.\n"],["retrieve","Picky::Backends::Memory::JSON","classes/Picky/Backends/Memory/JSON.html#method-i-retrieve","()","<p>A json file does not provide retrieve functionality.\n"],["retrieve","Picky::Backends::Memory::Marshal","classes/Picky/Backends/Memory/Marshal.html#method-i-retrieve","()","<p>A marshal file does not provide retrieve functionality.\n"],["retrieve","Picky::Backends::Prepared::Text","classes/Picky/Backends/Prepared/Text.html#method-i-retrieve","()","<p>Retrieves prepared index data in the form\n<p>id,datan\n<p>id,datan\n"],["retrieve","Picky::Backends::Redis::Basic","classes/Picky/Backends/Redis/Basic.html#method-i-retrieve","()","<p>We do not use Redis to retrieve data.\n"],["retrieve","Picky::Category","classes/Picky/Category.html#method-i-retrieve","()","<p>Retrieves the prepared index data into the indexes and generates the\nnecessary derived indexes.\n"],["saved","Picky::Try","classes/Picky/Try.html#method-i-saved","()",""],["saved?","Picky::Generators::Partial::None","classes/Picky/Generators/Partial/None.html#method-i-saved-3F","()","<p>Returns if this strategy’s generated file is saved.\n"],["saved?","Picky::Generators::Similarity::None","classes/Picky/Generators/Similarity/None.html#method-i-saved-3F","()","<p>Returns if this strategy’s generated file is saved.\n"],["saved?","Picky::Generators::Strategy","classes/Picky/Generators/Strategy.html#method-i-saved-3F","()","<p>By default, all caches are saved in a storage (like a file).\n"],["saved?","Picky::Generators::Weights::Stub","classes/Picky/Generators/Weights/Stub.html#method-i-saved-3F","()","<p>It is not saved, by default.\n"],["schedule","Picky::Scheduler","classes/Picky/Scheduler.html#method-i-schedule","(&block)",""],["scheduler","Picky::Scheduler","classes/Picky/Scheduler.html#method-i-scheduler","()",""],["score","Picky::Query::Combinations","classes/Picky/Query/Combinations.html#method-i-score","()","<p>Sums up the weights of the combinations.\n<p>Note: Optimized sum(&amp;:weight) away – ~3% improvement.\n"],["search","Picky::Search","classes/Picky/Search.html#method-i-search","(text, ids = 20, offset = 0, options = {})","<p>This is the main entry point for a query. Use this in specs and also for\nrunning queries.\n<p>Parameters: …\n"],["search_with","Picky::Search","classes/Picky/Search.html#method-i-search_with","(tokens, ids = 20, offset = 0, original_text = nil, unique = false)","<p>Runs the actual search using Query::Tokens.\n<p>Note: Internal method, use #search to search.\n"],["searched","Picky::Try","classes/Picky/Try.html#method-i-searched","()",""],["searching","Picky::Search","classes/Picky/Search.html#method-i-searching","(options)","<p>Defines tokenizer options or the tokenizer itself.\n<p>Examples:\n\n<pre>search = Search.new(index1, index2, index3) ...</pre>\n"],["searching","Picky::Sinatra","classes/Picky/Sinatra.html#method-i-searching","(options = {})","<p>Sets tokenizer default searching options.\n"],["searching","Picky::Tokenizer","classes/Picky/Tokenizer.html#method-c-searching","()",""],["similar","Picky::Bundle","classes/Picky/Bundle.html#method-i-similar","(text)","<p>Get a list of similar texts.\n<p>Note: Does not return itself.\n"],["similar?","Picky::Query::Token","classes/Picky/Query/Token.html#method-i-similar-3F","()","<p>Is this a “similar” character?\n"],["similar_character=","Picky::Query::Token","classes/Picky/Query/Token.html#method-c-similar_character-3D","(character)","<p>Define a character which makes a token a similar token.\n<p>Default is ‘~’.\n<p>This is used in a regexp (%r{#{char} …\n"],["similar_possible_for","Picky::Categories","classes/Picky/Categories.html#method-i-similar_possible_for","(token)","<p>Gets all similar tokens and puts together the possible combinations for\neach found similar token.\n"],["similar_tokens_for","Picky::Categories","classes/Picky/Categories.html#method-i-similar_tokens_for","(token)","<p>Returns all possible similar tokens for the given token.\n"],["similar_tokens_for","Picky::Query::Token","classes/Picky/Query/Token.html#method-i-similar_tokens_for","(category)","<p>Returns all similar tokens for the token.\n"],["similarity_to_s","Analyzer","classes/Analyzer.html#method-i-similarity_to_s","()",""],["similarize","Picky::Query::Token","classes/Picky/Query/Token.html#method-i-similarize","()",""],["size","Picky::Backends::File::JSON","classes/Picky/Backends/File/JSON.html#method-i-size","()","<p>Size of the index is equal to the mapping size.\n"],["size","Picky::Backends::Redis::List","classes/Picky/Backends/Redis/List.html#method-i-size","()","<p>Size of the list(s).\n"],["size","Picky::Backends::Redis::String","classes/Picky/Backends/Redis/String.html#method-i-size","()","<p>Returns the size of the hash.\n"],["size","Picky::Backends::SQLite::Array","classes/Picky/Backends/SQLite/Array.html#method-i-size","()",""],["sort!","Picky::Query::Allocations","classes/Picky/Query/Allocations.html#method-i-sort-21","()","<p>Sort the allocations.\n"],["sort_by_levenshtein!","Array","classes/Array.html#method-i-sort_by_levenshtein-21","(from)","<p>Sort the array using distance from levenshtein.\n<p>Will raise if encounters not to_s-able element.\n"],["sorted_allocations","Picky::Search","classes/Picky/Search.html#method-i-sorted_allocations","(tokens, amount = nil)","<p>Gets sorted allocations for the tokens.\n"],["soundex","String","classes/String.html#method-i-soundex","()","<p>Returns a soundex code for this string.\n"],["soundex","Symbol","classes/Symbol.html#method-i-soundex","()","<p>Returns a soundex code for this symbol.\n"],["source","Picky::Category","classes/Picky/Category.html#method-i-source","()","<p>Return an appropriate source.\n<p>If we have no explicit source, we’ll check the index for one.\n"],["source","Picky::Index","classes/Picky/Index.html#method-i-source","(some_source = nil, &block)","<p>Define a source on the index.\n<p>Parameter is a source, either one of the standard sources or anything\nresponding …\n"],["split","Picky::Tokenizer","classes/Picky/Tokenizer.html#method-i-split","(text)",""],["splits_text_on","Picky::Tokenizer","classes/Picky/Tokenizer.html#method-i-splits_text_on","(regexp_or_string)","<p>Splitting.\n<p>We allow Strings and Regexps. Note: We do not test against to_str since\nsymbols do not work …\n"],["start","Picky::Console","classes/Picky/Console.html#method-c-start","(args = ARGV)",""],["start_master_process_thread","Picky::Interfaces::LiveParameters::MasterChild","classes/Picky/Interfaces/LiveParameters/MasterChild.html#method-i-start_master_process_thread","()","<p>This runs a thread that listens to child processes.\n"],["stopwords","Picky::Tokenizer","classes/Picky/Tokenizer.html#method-i-stopwords","(regexp)","<p>Stopwords.\n<p>We only allow regexps (even if string would be okay too for gsub! - it’s\ntoo hard to understand) …\n"],["substitute","Picky::CharacterSubstituters::WestEuropean","classes/Picky/CharacterSubstituters/WestEuropean.html#method-i-substitute","(text)","<p>Substitutes occurrences of certain characters (like Umlauts) with ASCII\nrepresentations of them.\n<p>Examples: …\n"],["substitute_characters","Picky::Tokenizer","classes/Picky/Tokenizer.html#method-i-substitute_characters","(text)",""],["substitutes_characters_with","Picky::Tokenizer","classes/Picky/Tokenizer.html#method-i-substitutes_characters_with","(substituter = CharacterSubstituters::WestEuropean.new)","<p>Substitute Characters with this substituter.\n<p>Default is European Character substitution.\n"],["symbolize","Picky::Query::Tokens","classes/Picky/Query/Tokens.html#method-i-symbolize","()","<p>Symbolizes each of the tokens.\n"],["symbolize!","Picky::Query::Token","classes/Picky/Query/Token.html#method-i-symbolize-21","()","<p>Symbolizes this token’s text.\n<p>Note: Call externally when Picky operates in Symbols mode.\n"],["synchronous","Picky::Backends::SQLite::Basic","classes/Picky/Backends/SQLite/Basic.html#method-i-synchronous","()",""],["terminate_early","Picky::Search","classes/Picky/Search.html#method-i-terminate_early","(extra_allocations = 0)","<p>Tells Picky to terminate calculating ids if it has enough ids. (So, early)\n<p>Important note: Do not use …\n"],["timed","Picky::Helpers::Measuring","classes/Picky/Helpers/Measuring.html#method-i-timed","(*args, &block)","<p>Returns a duration in seconds.\n"],["timed_exclaim","Object","classes/Object.html#method-i-timed_exclaim","(text)","<p>Puts a text in the form:\n\n<pre>12:34:56: text here</pre>\n"],["timed_exclaim","Picky::Loggers::Verbose","classes/Picky/Loggers/Verbose.html#method-i-timed_exclaim","(text)","<p>Puts a text in the form:\n\n<pre>12:34:56: text here</pre>\n"],["timed_indexing","Picky::Helpers::Indexing","classes/Picky/Helpers/Indexing.html#method-i-timed_indexing","(scheduler, &block)",""],["to","Picky::Generators::Partial::Substring","classes/Picky/Generators/Partial/Substring.html#method-i-to","()","<p>Delegator to generator#to.\n"],["to_a","Picky::Query::Allocations","classes/Picky/Query/Allocations.html#method-i-to_a","()",""],["to_hash","Picky::Results","classes/Picky/Results.html#method-i-to_hash","()","<p>Returns a hash with the allocations, offset, duration and total.\n"],["to_json","Hash","classes/Hash.html#method-i-to_json","(options = {})","<p>Use multi_json’s encoding.\n"],["to_json","Picky::Query::Allocation","classes/Picky/Query/Allocation.html#method-i-to_json","(options = {})","<p>Json representation of this allocation.\n<p>Note: Delegates to to_result.\n"],["to_json","Picky::Results","classes/Picky/Results.html#method-i-to_json","(options = {})","<p>Convert to json format.\n"],["to_result","Picky::Query::Allocation","classes/Picky/Query/Allocation.html#method-i-to_result","()","<p>Transform the allocation into result form.\n"],["to_result","Picky::Query::Allocations","classes/Picky/Query/Allocations.html#method-i-to_result","()","<p>Allocations for results are in the form: [\n\n<pre>allocation1.to_result,\nallocation2.to_result\n...</pre>\n<p>]\n"],["to_result","Picky::Query::Combination","classes/Picky/Query/Combination.html#method-i-to_result","()","<p>Combines the category names with the original names. [\n\n<pre>[:title,    'Flarbl', :flarbl],\n[:category, 'Gnorf', ...</pre>\n"],["to_result","Picky::Query::Combinations","classes/Picky/Query/Combinations.html#method-i-to_result","()",""],["to_result","Picky::Query::Token","classes/Picky/Query/Token.html#method-i-to_result","()","<p>Returns the token in the form\n\n<pre>['original:Text', 'processedtext']</pre>\n"],["to_s","Analyzer","classes/Analyzer.html#method-i-to_s","()",""],["to_s","Picky::Backends::Backend","classes/Picky/Backends/Backend.html#method-i-to_s","()",""],["to_s","Picky::Backends::File::Basic","classes/Picky/Backends/File/Basic.html#method-i-to_s","()",""],["to_s","Picky::Backends::Memory::Basic","classes/Picky/Backends/Memory/Basic.html#method-i-to_s","()",""],["to_s","Picky::Backends::Redis::Basic","classes/Picky/Backends/Redis/Basic.html#method-i-to_s","()",""],["to_s","Picky::Backends::SQLite::Basic","classes/Picky/Backends/SQLite/Basic.html#method-i-to_s","()",""],["to_s","Picky::Bundle","classes/Picky/Bundle.html#method-i-to_s","()",""],["to_s","Picky::Categories","classes/Picky/Categories.html#method-i-to_s","()",""],["to_s","Picky::Category","classes/Picky/Category.html#method-i-to_s","()",""],["to_s","Picky::CharacterSubstituters::WestEuropean","classes/Picky/CharacterSubstituters/WestEuropean.html#method-i-to_s","()",""],["to_s","Picky::Generators::Strategy","classes/Picky/Generators/Strategy.html#method-i-to_s","()",""],["to_s","Picky::Index","classes/Picky/Index.html#method-i-to_s","()",""],["to_s","Picky::Indexes","classes/Picky/Indexes.html#method-i-to_s","()",""],["to_s","Picky::Interfaces::LiveParameters::MasterChild","classes/Picky/Interfaces/LiveParameters/MasterChild.html#method-i-to_s","()",""],["to_s","Picky::Query::Allocation","classes/Picky/Query/Allocation.html#method-i-to_s","()",""],["to_s","Picky::Query::Allocations","classes/Picky/Query/Allocations.html#method-i-to_s","()","<p>Simply inspects the internal allocations.\n"],["to_s","Picky::Query::Boosts","classes/Picky/Query/Boosts.html#method-i-to_s","()","<p>Prints out a nice representation of the configured weights.\n"],["to_s","Picky::Query::Combination","classes/Picky/Query/Combination.html#method-i-to_s","()","<p>Example:\n\n<pre>&quot;exact title:Peter*:peter&quot;</pre>\n"],["to_s","Picky::Query::Combinations","classes/Picky/Query/Combinations.html#method-i-to_s","()",""],["to_s","Picky::Query::DifferentBackendsError","classes/Picky/Query/DifferentBackendsError.html#method-i-to_s","()",""],["to_s","Picky::Query::Token","classes/Picky/Query/Token.html#method-i-to_s","()","<p>Displays the text and the qualifiers.\n<p>e.g. name:meier\n"],["to_s","Picky::Query::Tokens","classes/Picky/Query/Tokens.html#method-i-to_s","()","<p>Just join the token original texts.\n"],["to_s","Picky::Results","classes/Picky/Results.html#method-i-to_s","()",""],["to_s","Picky::Search","classes/Picky/Search.html#method-i-to_s","()","<p>Display some nice information for the user.\n"],["to_s","Picky::Statistics","classes/Picky/Statistics.html#method-i-to_s","()","<p>Outputs all gathered statistics.\n"],["to_s","Picky::Tokenizer","classes/Picky/Tokenizer.html#method-i-to_s","()",""],["to_stats","Picky::Index","classes/Picky/Index.html#method-i-to_stats","()",""],["to_stdout","Picky::Try","classes/Picky/Try.html#method-i-to_stdout","()",""],["tokenize","Picky::Loggers::Concise","classes/Picky/Loggers/Concise.html#method-i-tokenize","(*)",""],["tokenize","Picky::Loggers::Silent","classes/Picky/Loggers/Silent.html#method-i-tokenize","(*)",""],["tokenize","Picky::Loggers::Verbose","classes/Picky/Loggers/Verbose.html#method-i-tokenize","(index_or_category, prepared_file)",""],["tokenize","Picky::Tokenizer","classes/Picky/Tokenizer.html#method-i-tokenize","(text)","<p>Returns a number of tokens, generated from the given text, based on the\nparameters given.\n<p>Returns:\n\n<pre>[[:token1, ...</pre>\n"],["tokenized","Picky::Search","classes/Picky/Search.html#method-i-tokenized","(text, partialize_last = true)","<p>Delegates the tokenizing to the query tokenizer.\n<p>Parameters:\n<p>text: The string to tokenize.\n"],["tokenizer","Picky::Category","classes/Picky/Category.html#method-i-tokenizer","()","<p>Returns an appropriate tokenizer. If one isn’t set on this category, will\ntry the index, and finally …\n"],["tokenizer","Picky::Category::Location","classes/Picky/Category/Location.html#method-i-tokenizer","()","<p>Only uses a basic tokenizer that’s already geared towards numbers.\n"],["tokenizer","Picky::Index","classes/Picky/Index.html#method-i-tokenizer","()","<p>Returns the installed tokenizer or the default.\n"],["tokenizer","Picky::Indexes","classes/Picky/Indexes.html#method-i-tokenizer","()",""],["tokens","Picky::Analytics","classes/Picky/Analytics.html#method-i-tokens","()","<p>Returns the number of tokens in all the inverted indexes.\n"],["tokens_for","Picky::Tokenizer","classes/Picky/Tokenizer.html#method-i-tokens_for","(words)","<p>Downcases.\n"],["total","Picky::Query::Allocations","classes/Picky/Query/Allocations.html#method-i-total","()","<p>The total is simply the sum of the counts of all allocations.\n"],["total","Picky::Results","classes/Picky/Results.html#method-i-total","()","<p>The total results. Delegates to the allocations.\n"],["transaction","Picky::Backends::SQLite::Basic","classes/Picky/Backends/SQLite/Basic.html#method-i-transaction","()",""],["truncate_db","Picky::Backends::SQLite::Basic","classes/Picky/Backends/SQLite/Basic.html#method-i-truncate_db","()","<p>Drops the table and creates it anew.\n<p>THINK Could this be replaced by a truncate (DELETE FROM) statement? …\n"],["try_updating_configuration_with","Picky::Interfaces::LiveParameters::MasterChild","classes/Picky/Interfaces/LiveParameters/MasterChild.html#method-i-try_updating_configuration_with","(configuration_hash)","<p>Tries updating the configuration in the child process or parent process.\n"],["unblock_source","Picky::API::Source","classes/Picky/API/Source.html#method-i-unblock_source","()","<p>Get the actual source if it is wrapped in a time capsule, i.e. a\nblock/lambda.\n"],["uniq!","Picky::Query::Allocations","classes/Picky/Query/Allocations.html#method-i-uniq-21","()",""],["unshift","Picky::Backends::Redis::DirectlyManipulable","classes/Picky/Backends/Redis/DirectlyManipulable.html#method-i-unshift","(value)",""],["unshift","Picky::Backends::SQLite::DirectlyManipulable","classes/Picky/Backends/SQLite/DirectlyManipulable.html#method-i-unshift","(value)",""],["unshift","Picky::Category","classes/Picky/Category.html#method-i-unshift","(thing)","<p>Add at the beginning.\n"],["unshift","Picky::Index","classes/Picky/Index.html#method-i-unshift","(thing)","<p>Add at the beginning (calls add).\n"],["use_exact_for_partial?","Picky::Generators::Partial::None","classes/Picky/Generators/Partial/None.html#method-i-use_exact_for_partial-3F","()","<p>Do not use the partial bundle for getting ids and weights.\n"],["use_exact_for_partial?","Picky::Generators::Partial::Strategy","classes/Picky/Generators/Partial/Strategy.html#method-i-use_exact_for_partial-3F","()","<p>Defines whether to use the exact bundle instead of the partial one.\n<p>Default is @false@.\n<p>For example:\n"],["warn_gem_missing","Object","classes/Object.html#method-i-warn_gem_missing","(gem_name, message)","<p>Puts a text that informs the user of a missing gem.\n"],["weight","Picky::Backends::Backend","classes/Picky/Backends/Backend.html#method-i-weight","(combinations)","<p>Returns the total score of the combinations.\n<p>Default implementation. Override to speed up.\n"],["weight","Picky::Backends::Redis","classes/Picky/Backends/Redis.html#method-i-weight","(combinations)","<p>Returns the total weight for the combinations.\n"],["weight","Picky::Bundle","classes/Picky/Bundle.html#method-i-weight","(sym_or_string)","<p>Get a weight for the given symbol.\n<p>Returns a number, or nil.\n"],["weight","Picky::Category","classes/Picky/Category.html#method-i-weight","(token)","<p>Gets the weight for this token’s text.\n"],["weight","Picky::Query::Combination","classes/Picky/Query/Combination.html#method-i-weight","()","<p>Returns the weight of this combination.\n<p>Note: Caching is most of the time useful.\n"],["weight","Picky::Results::ExactFirst","classes/Picky/Results/ExactFirst.html#method-i-weight","(token)","<p>Overrides the original method.\n"],["weight","Picky::Wrappers::Bundle::Calculation","classes/Picky/Wrappers/Bundle/Calculation.html#method-i-weight","(float_str)","<p>SYMBOLS.\n<p>THINK Move the calculation elsewhere?\n"],["weight_for","Picky::Generators::Weights::Constant","classes/Picky/Generators/Weights/Constant.html#method-i-weight_for","(_)","<p>Returns the constant weight, except if there are no ids.\n<p>Not really used, but is more correct this way. …\n"],["weight_for","Picky::Generators::Weights::Logarithmic","classes/Picky/Generators/Weights/Logarithmic.html#method-i-weight_for","(amount)",""],["weight_for","Picky::Generators::Weights::Stub","classes/Picky/Generators/Weights/Stub.html#method-i-weight_for","(_)","<p>Returns nil.\n"],["weights","Analyzer","classes/Analyzer.html#method-i-weights","(index)",""],["weights_analysis","Analyzer","classes/Analyzer.html#method-i-weights_analysis","()",""],["weights_to_s","Analyzer","classes/Analyzer.html#method-i-weights_to_s","()",""],["with_data_snapshot","Picky::Category","classes/Picky/Category.html#method-i-with_data_snapshot","()","<p>Take a data snapshot if the source offers it.\n"],["with_data_snapshot","Picky::Index","classes/Picky/Index.html#method-i-with_data_snapshot","()","<p>Note: Duplicated in category_indexing.rb.\n<p>Take a data snapshot if the source offers it.\n"],["worker_pids","Picky::Interfaces::LiveParameters::Unicorn","classes/Picky/Interfaces/LiveParameters/Unicorn.html#method-i-worker_pids","()",""],["write_parent","Picky::Interfaces::LiveParameters::MasterChild","classes/Picky/Interfaces/LiveParameters/MasterChild.html#method-i-write_parent","(configuration_hash)","<p>Write the parent.\n<p>Note: The ;;; is the end marker for the message.\n"]]}}